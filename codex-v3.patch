 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/workflow1/INDEX.md b/workflow1/INDEX.md
new file mode 100644
index 0000000000000000000000000000000000000000..f8fac9c199e42741d55153cec67c9cdff8340b65
--- /dev/null
+++ b/workflow1/INDEX.md
@@ -0,0 +1,21 @@
+# Workflow1 Index (Phases 0–6)
+
+This index maps the extended workflow1 assets (Protocols 0–6) including templates, automation scripts, and evidence directories.
+
+| Phase | Protocol | Key Templates | Automation Scripts | Evidence Folder |
+| --- | --- | --- | --- | --- |
+| Phase 0 — Bootstrap | [0-bootstrap-your-project.md](0-bootstrap-your-project.md) | Charter, context kit templates (see protocol) | See protocol macros | Legacy evidence folder (see Protocol 0 guidance) |
+| Phase 1 — PRD Creation | [1-create-prd.md](1-create-prd.md) | PRD, backlog hypothesis | See protocol macros | Legacy evidence folder (see Protocol 1 guidance) |
+| Phase 2 — Design & Planning | [codex-phase2-design/protocol.md](codex-phase2-design/protocol.md) | [Architecture.md](codex-phase2-design/templates/Architecture.md), [C4 diagrams](codex-phase2-design/templates/C4), [ADR-template.md](codex-phase2-design/templates/ADR-template.md), [Backlog CSV](codex-phase2-design/templates/Product_Backlog.csv), [Sprint0_Plan.md](codex-phase2-design/templates/Sprint0_Plan.md), [Env_Strategy.md](codex-phase2-design/templates/Env_Strategy.md), [Repo_Policy.md](codex-phase2-design/templates/Repo_Policy.md), [Coding_Standards.md](codex-phase2-design/templates/Coding_Standards.md), [OpenAPI guidance](codex-phase2-design/templates/OpenAPI/README.md) | [generate_architecture_pack.py](codex-phase2-design/scripts/generate_architecture_pack.py), [generate_contract_assets.py](codex-phase2-design/scripts/generate_contract_assets.py) | [evidence/phase2](evidence/phase2) |
+| Phase 3 — Quality Rails | [codex-phase3-quality-rails/protocol.md](codex-phase3-quality-rails/protocol.md) | [Security_Checklist.md](codex-phase3-quality-rails/templates/Security_Checklist.md), [perf/budgets.json](codex-phase3-quality-rails/templates/perf/budgets.json), [A11y_Test_Plan.md](codex-phase3-quality-rails/templates/A11y_Test_Plan.md), [Analytics_Spec.xlsx](codex-phase3-quality-rails/templates/Analytics_Spec.xlsx), [Feature_Flags.md](codex-phase3-quality-rails/templates/Feature_Flags.md), [Test_Plan.md](codex-phase3-quality-rails/templates/Test_Plan.md), [Code_Review_Checklist.md](codex-phase3-quality-rails/templates/Code_Review_Checklist.md) | [run_quality_gates.sh](codex-phase3-quality-rails/scripts/run_quality_gates.sh), [configure_feature_flags.py](codex-phase3-quality-rails/scripts/configure_feature_flags.py) | [evidence/phase3](evidence/phase3) |
+| Phase 4 — Integration | [codex-phase4-integration/protocol.md](codex-phase4-integration/protocol.md) | [Observability_Spec.md](codex-phase4-integration/templates/Observability_Spec.md), [SLO_SLI.md](codex-phase4-integration/templates/SLO_SLI.md), [CHANGELOG.md](codex-phase4-integration/templates/CHANGELOG.md), [Staging_Smoke_Playbook.md](codex-phase4-integration/templates/Staging_Smoke_Playbook.md) | [generate_observability_pack.py](codex-phase4-integration/scripts/generate_observability_pack.py), [run_staging_smoke.sh](codex-phase4-integration/scripts/run_staging_smoke.sh) | [evidence/phase4](evidence/phase4) |
+| Phase 5 — Launch | [codex-phase5-launch/protocol.md](codex-phase5-launch/protocol.md) | [Deployment_Runbook.md](codex-phase5-launch/templates/Deployment_Runbook.md), [Rollback_Plan.md](codex-phase5-launch/templates/Rollback_Plan.md), [Prod_Observability.md](codex-phase5-launch/templates/Prod_Observability.md), [Backup_Policy.md](codex-phase5-launch/templates/Backup_Policy.md), [DR_Plan.md](codex-phase5-launch/templates/DR_Plan.md), [GoLive_Checklist.md](codex-phase5-launch/templates/GoLive_Checklist.md), [Release_Notes.md](codex-phase5-launch/templates/Release_Notes.md), [SEO_Checklist.md](codex-phase5-launch/templates/SEO_Checklist.md) | [rehearse_rollback.sh](codex-phase5-launch/scripts/rehearse_rollback.sh), [verify_dr_restore.sh](codex-phase5-launch/scripts/verify_dr_restore.sh) | [evidence/phase5](evidence/phase5) |
+| Phase 6 — Operations | [codex-phase6-operations/protocol.md](codex-phase6-operations/protocol.md) | [Postmortem_Template.md](codex-phase6-operations/templates/Postmortem_Template.md), [Dependency_Update_Log.md](codex-phase6-operations/templates/Dependency_Update_Log.md), [Security_Update_Log.md](codex-phase6-operations/templates/Security_Update_Log.md), [Retro_Template.md](codex-phase6-operations/templates/Retro_Template.md) | [monitor_slo.py](codex-phase6-operations/scripts/monitor_slo.py), [schedule_retros.py](codex-phase6-operations/scripts/schedule_retros.py) | [evidence/phase6](evidence/phase6) |
+
+## Evidence Folder Structure
+- Each `evidence/phaseN` directory stores `run.log`, `validation.md`, and `manifest.json` generated by automation scripts.
+- Scripts append entries with timestamps and checksums for traceability.
+
+## Additional Resources
+- [VERSION2.MD](VERSION2.MD) — implementation analysis and rationale.
+- [docs/LOCAL_DEV_WORKFLOW.md](../docs/LOCAL_DEV_WORKFLOW.md) — automation backbone leveraged across phases.
diff --git a/workflow1/PROJECT_EXECUTION_TEMPLATE.md b/workflow1/PROJECT_EXECUTION_TEMPLATE.md
new file mode 100644
index 0000000000000000000000000000000000000000..4192c62ca4bb21bae8adb928b6c3b8858eba024b
--- /dev/null
+++ b/workflow1/PROJECT_EXECUTION_TEMPLATE.md
@@ -0,0 +1,53 @@
+# Project Execution Template (Phases 0–6)
+
+Use this template to plan and execute engagements with the extended workflow1 protocols.
+
+## Phase 0 — Bootstrap
+- [ ] Review engagement brief and success metrics.
+- [ ] Populate context kit, stakeholder map, and communication plan.
+- Evidence: `evidence/phase0` (legacy format).
+
+## Phase 1 — PRD Creation
+- [ ] Generate PRD aligned with business goals.
+- [ ] Validate requirements and constraints with stakeholders.
+- Evidence: `evidence/phase1` (legacy format).
+
+## Phase 2 — Design & Planning
+- [ ] Run planning automation (`make plan-from-brief`).
+- [ ] Execute `codex-phase2-design/scripts/generate_architecture_pack.py`.
+- [ ] Execute `codex-phase2-design/scripts/generate_contract_assets.py`.
+- [ ] Confirm ADR approvals, OpenAPI lint, CI skeleton status.
+- Evidence: `evidence/phase2` (`run.log`, `validation.md`, `manifest.json`).
+
+## Phase 3 — Quality Rails
+- [ ] Bootstrap templates via `run_quality_gates.sh --bootstrap`.
+- [ ] Populate security, performance, accessibility, analytics, testing, and review artefacts.
+- [ ] Configure feature flags with `configure_feature_flags.py`.
+- [ ] Run `run_quality_gates.sh` and ensure CI gates are green.
+- Evidence: `evidence/phase3`.
+
+## Phase 4 — Integration
+- [ ] Generate observability pack via `generate_observability_pack.py`.
+- [ ] Update CHANGELOG and SLO/SLI definitions.
+- [ ] Run staging smoke automation `run_staging_smoke.sh` after deployments.
+- [ ] Confirm observability telemetry working.
+- Evidence: `evidence/phase4`.
+
+## Phase 5 — Launch
+- [ ] Complete deployment, rollback, DR, and observability templates.
+- [ ] Rehearse rollback (`rehearse_rollback.sh`) and verify DR restore (`verify_dr_restore.sh`).
+- [ ] Finalise Go-Live checklist, release notes, SEO checklist.
+- [ ] Collect sign-offs from Product, Engineering, SRE, Legal/Privacy.
+- Evidence: `evidence/phase5`.
+
+## Phase 6 — Operations
+- [ ] Record SLO adherence with `monitor_slo.py`.
+- [ ] Schedule retrospectives via `schedule_retros.py`.
+- [ ] Maintain dependency and security update logs; complete retros/postmortems.
+- [ ] Verify vulnerability SLAs and action closure cadence.
+- Evidence: `evidence/phase6`.
+
+## Governance & Reporting
+- Update `INDEX.md` when new artefacts or automation scripts are introduced.
+- Ensure each phase's validation log contains PASS/FAIL entries before progressing.
+- Maintain manifest checksums for traceability and audit.
diff --git a/workflow1/codex-phase2-design/protocol.md b/workflow1/codex-phase2-design/protocol.md
new file mode 100644
index 0000000000000000000000000000000000000000..a8f5f6d4839f3fc7425192a87f85e9ee8e17bc72
--- /dev/null
+++ b/workflow1/codex-phase2-design/protocol.md
@@ -0,0 +1,64 @@
+# Codex Phase 2 — Design & Planning Protocol
+
+This protocol extends `workflow1` Phase 1–2 guidance to satisfy AGENTS Phase 2 deliverables. It builds on [`0-bootstrap-your-project.md`](../0-bootstrap-your-project.md) and [`1-create-prd.md`](../1-create-prd.md) while aligning with the AGENTS instructions in `/workspace/Labs-test2/AGENTS.md`.
+
+## Objectives
+- Transform the Phase 1 discovery bundle into executable architecture, backlog, and environment assets.
+- Produce contract-first specifications (OpenAPI, data) and repository governance docs.
+- Ensure exit gates for ADR approval, OpenAPI validation, CI skeleton readiness, and backlog prioritisation are automated.
+
+## Inputs
+- Charter, requirements, initial risks from Phase 1 evidence.
+- `docs/LOCAL_DEV_WORKFLOW.md` automation (planning + scaffold commands).
+- Existing workflow1 templates for briefs, PRDs, and tasks.
+
+## Required Artefacts
+- `templates/Architecture.md`
+- `templates/C4/context.mmd`
+- `templates/C4/container.mmd`
+- `templates/ADR-template.md`
+- `templates/Product_Backlog.csv`
+- `templates/Sprint0_Plan.md`
+- `templates/Env_Strategy.md`
+- `templates/Repo_Policy.md`
+- `templates/Coding_Standards.md`
+- `templates/OpenAPI/README.md`
+
+## Automation Scripts
+- `scripts/generate_architecture_pack.py`
+  - Copies the architecture templates into a project-specific package and updates the evidence manifest.
+- `scripts/generate_contract_assets.py`
+  - Generates OpenAPI, backlog, and Sprint 0 scaffolds using `docs/LOCAL_DEV_WORKFLOW.md` commands as defaults.
+
+All scripts emit logs to `../evidence/phase2/run.log` and update the manifest so Codex can report completion.
+
+## Procedure
+1. Run planning automation (`make plan-from-brief`) per `docs/LOCAL_DEV_WORKFLOW.md`.
+2. Execute `python scripts/generate_architecture_pack.py --project <slug>`.
+3. Execute `python scripts/generate_contract_assets.py --project <slug> --service <name>`.
+4. Validate outputs:
+   - `adr validate` (ensures no TODO decisions remain).
+   - `npm run lint` / `pip install -r requirements.txt && pytest -q` to confirm CI skeleton.
+   - `npx @redocly/cli lint openapi/<service>.yaml` to ensure contract validity.
+5. Document validation status in `../evidence/phase2/validation.md` and attach checksums via manifest script output.
+
+## Exit Criteria
+- All required artefacts generated with owner + status filled.
+- Evidence files (`run.log`, `validation.md`, `manifest.json`) updated with current timestamps.
+- ADRs approved (no `Status: Pending`).
+- OpenAPI lints clean; mock server script defined.
+- CI skeleton (lint/type/build) succeeds locally.
+- Backlog contains ≥2 sprints and AC references for each backlog item.
+
+## Dependencies
+- Python 3.10+
+- Node tooling for lint/testing (per project stack)
+- `redocly-cli` (npm) or `speccy` for OpenAPI validation
+- Access to repository to create ADR/backlog branches
+
+## Evidence Logging
+Scripts automatically append entries to `../evidence/phase2/run.log` and update `manifest.json`. Manual actions must also be summarised. Validation outcomes (`PASS`/`FAIL` with reason) belong in `validation.md`.
+
+## Related Protocols
+- Protocol 0–1 for upstream discovery.
+- Protocol 3+ for subsequent quality, integration, launch, and operations gates.
diff --git a/workflow1/codex-phase2-design/scripts/generate_architecture_pack.py b/workflow1/codex-phase2-design/scripts/generate_architecture_pack.py
new file mode 100644
index 0000000000000000000000000000000000000000..4e4e374b5d7dec9e3d2c306ec51aa74f419a98f7
--- /dev/null
+++ b/workflow1/codex-phase2-design/scripts/generate_architecture_pack.py
@@ -0,0 +1,111 @@
+#!/usr/bin/env python3
+"""Generate the architecture asset bundle for AGENTS Phase 2.
+
+The script copies core architecture templates into an evidence output folder and
+records actions in `evidence/phase2/run.log` + `manifest.json`. It is designed to
+be orchestrated by the commands described in `docs/LOCAL_DEV_WORKFLOW.md`.
+"""
+from __future__ import annotations
+
+import argparse
+import hashlib
+import json
+from datetime import datetime
+from pathlib import Path
+from typing import Dict, List
+
+ROOT = Path(__file__).resolve().parents[2]
+PHASE = "phase2"
+TEMPLATES = {
+    "Architecture.md": Path("Architecture.md"),
+    "C4/context.mmd": Path("C4") / "context.mmd",
+    "C4/container.mmd": Path("C4") / "container.mmd",
+    "ADR-template.md": Path("ADR-template.md"),
+    "Env_Strategy.md": Path("Env_Strategy.md"),
+    "Repo_Policy.md": Path("Repo_Policy.md"),
+    "Coding_Standards.md": Path("Coding_Standards.md"),
+}
+
+
+def sha256sum(path: Path) -> str:
+    h = hashlib.sha256()
+    with path.open("rb") as f:
+        for chunk in iter(lambda: f.read(8192), b""):
+            h.update(chunk)
+    return h.hexdigest()
+
+
+def load_manifest(manifest_path: Path) -> List[Dict[str, str]]:
+    if manifest_path.exists():
+        return json.loads(manifest_path.read_text())
+    return []
+
+
+def write_manifest(manifest_path: Path, entries: List[Dict[str, str]]) -> None:
+    manifest_path.write_text(json.dumps(entries, indent=2, sort_keys=True))
+
+
+def append_run_log(log_path: Path, message: str) -> None:
+    timestamp = datetime.utcnow().isoformat() + "Z"
+    with log_path.open("a", encoding="utf-8") as handle:
+        handle.write(f"[{timestamp}] {message}\n")
+
+
+def copy_templates(project: str) -> List[Path]:
+    script_dir = Path(__file__).resolve().parent
+    template_root = script_dir.parent / "templates"
+    output_root = script_dir.parent / ".." / "evidence" / PHASE / "outputs" / project / "architecture"
+    output_root = output_root.resolve()
+    output_root.mkdir(parents=True, exist_ok=True)
+
+    copied: List[Path] = []
+    for display, rel in TEMPLATES.items():
+        src = (template_root / rel).resolve()
+        if not src.exists():
+            raise FileNotFoundError(f"Template missing: {display} -> {src}")
+        dest = output_root / display
+        dest.parent.mkdir(parents=True, exist_ok=True)
+        dest.write_bytes(src.read_bytes())
+        copied.append(dest)
+    return copied
+
+
+def update_manifest(copied: List[Path], manifest_path: Path, project: str) -> None:
+    entries = load_manifest(manifest_path)
+    for path in copied:
+        rel = path.relative_to(ROOT)
+        checksum = sha256sum(path)
+        entry = {
+            "phase": PHASE,
+            "project": project,
+            "file": str(rel),
+            "checksum": checksum,
+        }
+        entries = [e for e in entries if not (e.get("file") == entry["file"] and e.get("project") == project)]
+        entries.append(entry)
+    write_manifest(manifest_path, entries)
+
+
+def main() -> None:
+    parser = argparse.ArgumentParser(description=__doc__)
+    parser.add_argument("--project", required=True, help="Project slug used in evidence output")
+    args = parser.parse_args()
+
+    project = args.project.strip()
+    if not project:
+        raise SystemExit("Project slug cannot be empty")
+
+    copied = copy_templates(project)
+
+    evidence_dir = Path(__file__).resolve().parents[2] / "evidence" / PHASE
+    manifest_path = evidence_dir / "manifest.json"
+    run_log = evidence_dir / "run.log"
+
+    update_manifest(copied, manifest_path, project)
+    append_run_log(run_log, f"generate_architecture_pack: copied {len(copied)} files for project '{project}'")
+
+    print(f"Architecture pack ready: {len(copied)} files -> {copied[0].parent}")
+
+
+if __name__ == "__main__":
+    main()
diff --git a/workflow1/codex-phase2-design/scripts/generate_contract_assets.py b/workflow1/codex-phase2-design/scripts/generate_contract_assets.py
new file mode 100644
index 0000000000000000000000000000000000000000..05d0cbd201c3c7531192364a3c21819697731ca8
--- /dev/null
+++ b/workflow1/codex-phase2-design/scripts/generate_contract_assets.py
@@ -0,0 +1,133 @@
+#!/usr/bin/env python3
+"""Generate contract-first assets for AGENTS Phase 2."""
+from __future__ import annotations
+
+import argparse
+import hashlib
+import json
+from datetime import datetime
+from pathlib import Path
+from typing import Dict, List
+
+ROOT = Path(__file__).resolve().parents[2]
+PHASE = "phase2"
+
+
+def sha256sum(path: Path) -> str:
+    import hashlib
+
+    h = hashlib.sha256()
+    with path.open("rb") as f:
+        for chunk in iter(lambda: f.read(8192), b""):
+            h.update(chunk)
+    return h.hexdigest()
+
+
+def load_manifest(manifest_path: Path) -> List[Dict[str, str]]:
+    if manifest_path.exists():
+        return json.loads(manifest_path.read_text())
+    return []
+
+
+def write_manifest(manifest_path: Path, entries: List[Dict[str, str]]) -> None:
+    manifest_path.write_text(json.dumps(entries, indent=2, sort_keys=True))
+
+
+def append_run_log(log_path: Path, message: str) -> None:
+    timestamp = datetime.utcnow().isoformat() + "Z"
+    with log_path.open("a", encoding="utf-8") as handle:
+        handle.write(f"[{timestamp}] {message}\n")
+
+
+def ensure_template_copy(template_root: Path, relative: Path, destination: Path) -> Path:
+    src = (template_root / relative).resolve()
+    if not src.exists():
+        raise FileNotFoundError(f"Missing template: {relative}")
+    destination.parent.mkdir(parents=True, exist_ok=True)
+    destination.write_bytes(src.read_bytes())
+    return destination
+
+
+def create_openapi_stub(dest: Path, service: str) -> Path:
+    dest.parent.mkdir(parents=True, exist_ok=True)
+    if dest.exists():
+        return dest
+    content = f"""openapi: 3.1.0
+info:
+  title: {service.title()} API
+  version: 0.1.0
+  description: Contract-first stub generated during Phase 2.
+servers:
+  - url: http://localhost:8000
+    description: Local mock server
+paths:
+  /health:
+    get:
+      summary: Health probe
+      responses:
+        '200':
+          description: OK
+          content:
+            application/json:
+              schema:
+                type: object
+                properties:
+                  status:
+                    type: string
+                    example: ok
+"""
+    dest.write_text(content)
+    return dest
+
+
+def update_manifest(records: List[Path], manifest_path: Path, project: str) -> None:
+    entries = load_manifest(manifest_path)
+    for path in records:
+        rel = path.relative_to(ROOT)
+        checksum = sha256sum(path)
+        entry = {
+            "phase": PHASE,
+            "project": project,
+            "file": str(rel),
+            "checksum": checksum,
+        }
+        entries = [e for e in entries if not (e.get("file") == entry["file"] and e.get("project") == project)]
+        entries.append(entry)
+    write_manifest(manifest_path, entries)
+
+
+def main() -> None:
+    parser = argparse.ArgumentParser(description=__doc__)
+    parser.add_argument("--project", required=True)
+    parser.add_argument("--service", required=True, help="Service slug for OpenAPI stub")
+    args = parser.parse_args()
+
+    project = args.project.strip()
+    service = args.service.strip()
+    if not project or not service:
+        raise SystemExit("Project and service slugs cannot be empty")
+
+    script_dir = Path(__file__).resolve().parent
+    template_root = script_dir.parent / "templates"
+    evidence_root = ROOT / "evidence" / PHASE / "outputs" / project / "contracts"
+    evidence_root.mkdir(parents=True, exist_ok=True)
+
+    copied: List[Path] = []
+    copied.append(ensure_template_copy(template_root, Path("Product_Backlog.csv"), evidence_root / "Product_Backlog.csv"))
+    copied.append(ensure_template_copy(template_root, Path("Sprint0_Plan.md"), evidence_root / "Sprint0_Plan.md"))
+    copied.append(ensure_template_copy(template_root, Path("OpenAPI/README.md"), evidence_root / "OpenAPI_README.md"))
+
+    openapi_stub = evidence_root / "openapi" / f"{service}.yaml"
+    copied.append(create_openapi_stub(openapi_stub, service))
+
+    manifest_path = ROOT / "evidence" / PHASE / "manifest.json"
+    run_log = ROOT / "evidence" / PHASE / "run.log"
+
+    update_manifest(copied, manifest_path, project)
+    append_run_log(run_log, f"generate_contract_assets: generated {len(copied)} artefacts for project '{project}' service '{service}'")
+
+    print(f"Contract assets generated in {evidence_root}")
+
+
+if __name__ == "__main__":
+    main()
diff --git a/workflow1/codex-phase2-design/templates/ADR-template.md b/workflow1/codex-phase2-design/templates/ADR-template.md
new file mode 100644
index 0000000000000000000000000000000000000000..417ea18ed4008eb8d89ea8ee75bbcd392f7b1975
--- /dev/null
+++ b/workflow1/codex-phase2-design/templates/ADR-template.md
@@ -0,0 +1,35 @@
+# Architecture Decision Record
+
+- **Decision ID:** ADR-000
+- **Status:** Pending | Approved | Superseded | Rejected
+- **Date:**
+- **Decision Owners:**
+
+## Context
+Summarise the drivers (requirements, constraints, risks) triggering this decision. Reference AGENTS Phase 2 objectives and related protocols.
+
+## Decision
+State the selected option. Include architectural principles satisfied, trade-offs, and links to impacted components.
+
+## Options Considered
+| Option | Pros | Cons | Evidence |
+| --- | --- | --- | --- |
+| | | | |
+
+## Implications
+- Short-term consequences
+- Long-term/operational impacts
+- Required follow-up actions (tickets, owners, due dates)
+
+## Validation & Evidence
+- Prototype / spike results
+- Links to OpenAPI or architecture diagrams
+- Quality gate outcomes (lint/tests)
+
+## Revisions
+- Date / change summary / author
+
+## Approval
+- Architecture lead:
+- Engineering lead:
+- Product/Compliance sign-off:
diff --git a/workflow1/codex-phase2-design/templates/Architecture.md b/workflow1/codex-phase2-design/templates/Architecture.md
new file mode 100644
index 0000000000000000000000000000000000000000..442ed64591b82d25f0e146827b9810290cb04190
--- /dev/null
+++ b/workflow1/codex-phase2-design/templates/Architecture.md
@@ -0,0 +1,50 @@
+# Architecture Overview
+
+## Purpose
+Document the target system architecture for Phase 2 design sign-off. Aligns with AGENTS Phase 2 requirements and Protocol 2 expectations from `workflow1`.
+
+## Context Summary
+- **Product/Service Name:**
+- **Problem Statement:**
+- **Key Personas & Journeys:**
+- **Regulatory/Compliance Constraints:**
+
+## Architectural Principles
+1. Principle name — rationale, measurable guardrail, AGENTS link.
+2. ...
+
+## System Landscape
+- Reference `C4/context.mmd` for system relationships.
+- Include upstream/downstream dependencies.
+- Capture integration contracts (OpenAPI, events, ERD).
+
+## Capability Breakdown
+| Capability | Owner | Supporting Services | Notes |
+| --- | --- | --- | --- |
+| | | | |
+
+## Data Strategy
+- Authoritative data stores and retention strategy.
+- Privacy & residency considerations.
+- Migration plan references.
+
+## Security & Compliance
+- Threat model summary (link to Security_Checklist.md once available).
+- Authentication/authorisation decisions.
+- Data protection controls.
+
+## Operational Quality
+- Performance expectations (latency, throughput, budgets).
+- Observability hooks (logs, metrics, traces).
+- SLO guardrails (link to Phase 4 templates).
+
+## Decision Log
+Reference ADR catalogue; list key decisions and status.
+
+## Open Questions / Risks
+- Risk description, mitigation owner, due date.
+
+## Approval
+- Architecture lead sign-off:
+- Product sign-off:
+- Date:
diff --git a/workflow1/codex-phase2-design/templates/C4/container.mmd b/workflow1/codex-phase2-design/templates/C4/container.mmd
new file mode 100644
index 0000000000000000000000000000000000000000..99438bb2981a9f813ed79fb4f2485ab77df1a4de
--- /dev/null
+++ b/workflow1/codex-phase2-design/templates/C4/container.mmd
@@ -0,0 +1,20 @@
+%% C4 Container Diagram (Mermaid)
+C4Container
+    title Container View
+    Person(customer, "Customer")
+    Container_Boundary(system, "Target Platform") {
+        Container(web_app, "Web App", "React/Next.js", "UI and client orchestration")
+        Container(api, "API Gateway", "FastAPI", "Contract-first services")
+        Container(db, "Primary Database", "PostgreSQL", "Transactional store")
+        Container(job, "Async Workers", "Celery", "Background processing")
+    }
+    Container_Ext(third_party, "3rd Party Service", "REST", "External capability")
+    Container_Ext(monitoring, "Monitoring Stack", "Grafana/Prometheus", "Observability")
+
+    Rel(customer, web_app, "Uses", "HTTPS")
+    Rel(web_app, api, "Calls", "REST / GraphQL")
+    Rel(api, db, "Reads/Writes", "SQL")
+    Rel(api, job, "Queues work", "AMQP")
+    Rel(job, db, "Stores results", "SQL")
+    Rel(api, third_party, "Integrates", "OpenAPI contract")
+    Rel(api, monitoring, "Emits metrics", "OTel")
diff --git a/workflow1/codex-phase2-design/templates/C4/context.mmd b/workflow1/codex-phase2-design/templates/C4/context.mmd
new file mode 100644
index 0000000000000000000000000000000000000000..9b02314778d590776cdf941738eba8a7c081ef52
--- /dev/null
+++ b/workflow1/codex-phase2-design/templates/C4/context.mmd
@@ -0,0 +1,13 @@
+%% C4 Context Diagram (Mermaid) — aligns with AGENTS Phase 2 architecture requirements
+C4Context
+    title System Context
+    Person(customer, "Customer", "Primary persona interacting with the product")
+    System_Boundary(system, "Target Platform") {
+        Container(app, "Application", "Tech Stack TBD", "Delivers the core user workflow")
+    }
+    System_Ext(api_partner, "Partner API", "External", "Data provider / integration")
+    System_Ext(obs, "Observability Stack", "Logging/metrics destination")
+
+    Rel(customer, app, "Uses", "Web / Mobile")
+    Rel(app, api_partner, "Consumes", "OpenAPI contract: /openapi/<service>.yaml")
+    Rel(app, obs, "Emits telemetry", "OTel traces + metrics")
diff --git a/workflow1/codex-phase2-design/templates/Coding_Standards.md b/workflow1/codex-phase2-design/templates/Coding_Standards.md
new file mode 100644
index 0000000000000000000000000000000000000000..7f6b8df9ea1a9c0c24d7a2550f3154b5a970df50
--- /dev/null
+++ b/workflow1/codex-phase2-design/templates/Coding_Standards.md
@@ -0,0 +1,41 @@
+# Coding Standards
+
+## Purpose
+Provide language/framework conventions used to enforce consistency and CI linting baselines.
+
+## General Guidelines
+- Follow SOLID and clean code practices.
+- Prefer automated formatting tools (Prettier, Black, gofmt, etc.).
+- Document all public interfaces with docstrings/comments.
+
+## Language-Specific Rules
+### Python
+- Use type hints and run `mypy` during CI.
+- Use `black` + `isort` for formatting/import order.
+- Avoid side effects on import.
+
+### JavaScript/TypeScript
+- Enforce ESLint with recommended + security plugins.
+- Enable strict TypeScript config for new packages.
+- Limit module complexity (cyclomatic complexity < 10).
+
+### Infrastructure as Code
+- Terraform: run `terraform fmt` and `terraform validate` pre-commit.
+- YAML (CI/CD): verify with `yamllint` and schema validation.
+
+## Testing Standards
+- Minimum unit test coverage: 80% (adjust with risk justification).
+- Snapshot/UI tests for components.
+- Integration tests for service contracts.
+
+## Security Requirements
+- Apply secure defaults (OWASP ASVS alignment).
+- Validate inputs, sanitise outputs.
+- Document threat mitigations in `Security_Checklist.md` (Phase 3).
+
+## Documentation
+- Update README/CHANGELOG with user-facing changes.
+- Link to ADRs for major decisions.
+
+## Review Checklist
+- See `Code_Review_Checklist.md` for enforcement items.
diff --git a/workflow1/codex-phase2-design/templates/Env_Strategy.md b/workflow1/codex-phase2-design/templates/Env_Strategy.md
new file mode 100644
index 0000000000000000000000000000000000000000..3e723746d9ac2f82f199687f518a382bb9db4b52
--- /dev/null
+++ b/workflow1/codex-phase2-design/templates/Env_Strategy.md
@@ -0,0 +1,39 @@
+# Environment Strategy
+
+## Purpose
+Outline the provisioning, isolation, and secrets approach for all environments in alignment with AGENTS Phase 2.
+
+## Environments
+| Environment | Purpose | Hosting | Branch Trigger | Data Policy | Notes |
+| --- | --- | --- | --- | --- | --- |
+| Local | Developer workstation | Docker Compose | feature/* | Synthetic | |
+| Dev | Shared integration | Kubernetes | develop | Scrubbed | |
+| Staging | Pre-prod validation | Kubernetes | release/* | Sanitised | |
+| Production | Customer traffic | Kubernetes | main | Live | |
+
+## Access & Secrets
+- Secrets managed via vault (manual rotation, never stored in repo).
+- Access control roles with least privilege.
+
+## Deployment Strategy
+- Continuous deployment to dev.
+- Staging promoted through release branches with smoke automation.
+- Production uses canary + feature flags.
+
+## Tooling & Automation
+- Reference `docs/LOCAL_DEV_WORKFLOW.md` for bootstrap commands.
+- CI pipelines enforce lint/test/build prior to deployment.
+- Infrastructure templates stored in `/deploy/` (see repo policy).
+
+## Compliance & Audit
+- Logging requirements per policy.
+- Change management approvals.
+
+## Risks & Mitigation
+- Secret leakage → adopt secret scanning & vault integration.
+- Drift → scheduled infra validation.
+
+## Sign-off
+- DevOps/Platform lead:
+- Security lead:
+- Date:
diff --git a/workflow1/codex-phase2-design/templates/OpenAPI/README.md b/workflow1/codex-phase2-design/templates/OpenAPI/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..1358cdb2c4aacca0bd99755a8f47c0b8e1ac4b1e
--- /dev/null
+++ b/workflow1/codex-phase2-design/templates/OpenAPI/README.md
@@ -0,0 +1,27 @@
+# OpenAPI Contract Guidance
+
+## Purpose
+Ensure services ship with validated OpenAPI specifications and mock servers as required by AGENTS Phase 2 exit criteria.
+
+## Workflow
+1. Define endpoints using contract-first approach.
+2. Author YAML in `openapi/<service>.yaml` using Redocly or Stoplight style guides.
+3. Validate locally: `npx @redocly/cli lint openapi/<service>.yaml`.
+4. Generate mocks: `npx @redocly/cli mock openapi/<service>.yaml --watch`.
+5. Commit contract updates with corresponding ADR references.
+
+## Template Sections
+- Info (title, version, contact)
+- Servers (local, staging, production)
+- Tags per capability
+- Paths with request/response schemas
+- Components (schemas, security, parameters)
+
+## Integration Hooks
+- CI step runs Redocly lint + spectral rules.
+- Mock server used by integration tests.
+- Contract diffs trigger QA review.
+
+## Evidence
+- Attach lint output to `evidence/phase2/validation.md`.
+- Record mock server run info in `evidence/phase2/run.log`.
diff --git a/workflow1/codex-phase2-design/templates/Product_Backlog.csv b/workflow1/codex-phase2-design/templates/Product_Backlog.csv
new file mode 100644
index 0000000000000000000000000000000000000000..689ff579774788e6fccc4f183ee7dc668663914a
--- /dev/null
+++ b/workflow1/codex-phase2-design/templates/Product_Backlog.csv
@@ -0,0 +1,4 @@
+"ID","Title","Epic","Priority","Sprint","Acceptance Criteria","Estimate (pts)","Owner","Dependencies","Notes"
+"PB-001","","","Must","Sprint 0","- Given ...\n- When ...\n- Then ...","","","",""
+"PB-002","","","Should","Sprint 1","","","","",""
+"PB-003","","","Could","Sprint 2","","","","",""
diff --git a/workflow1/codex-phase2-design/templates/Repo_Policy.md b/workflow1/codex-phase2-design/templates/Repo_Policy.md
new file mode 100644
index 0000000000000000000000000000000000000000..7e41691fd7988f4297c8b96c1a803e6c17ebc8bc
--- /dev/null
+++ b/workflow1/codex-phase2-design/templates/Repo_Policy.md
@@ -0,0 +1,36 @@
+# Repository & Branch Policy
+
+## Purpose
+Define branching, review, and merge standards that satisfy AGENTS Phase 2 exit checks.
+
+## Branching Model
+- `main`: protected, deployable. Requires PR review + green CI.
+- `develop`: integration branch for staging.
+- `release/*`: temporary release branches for staging → production promotion.
+- `feature/*`: developer branches; delete after merge.
+
+## Commit Standards
+- Conventional Commits enforced via lint (`npm run lint:commits`).
+- Max PR size (lines/files) before additional approval.
+- Reference related ADR/backlog ID in commit body.
+
+## Pull Request Requirements
+- Minimum 2 approvals (Engineering + QA/PM).
+- All CI checks (lint, tests, security, perf, a11y) must pass.
+- Link to testing evidence and feature flags toggled.
+
+## Automation Hooks
+- GitHub Actions / GitLab CI pipeline definitions stored in `.github/workflows/`.
+- Requires `quality_gate_simple.sh` or equivalent to be invoked pre-merge.
+
+## Compliance Controls
+- Secret scanning and dependency scanning enabled.
+- Branch protection preventing force pushes.
+- Require signed commits if regulated environment.
+
+## Documentation
+- Link to `Code_Review_Checklist.md` (Phase 3) for reviewer prompts.
+
+## Sign-off
+- Repository maintainer:
+- Date:
diff --git a/workflow1/codex-phase2-design/templates/Sprint0_Plan.md b/workflow1/codex-phase2-design/templates/Sprint0_Plan.md
new file mode 100644
index 0000000000000000000000000000000000000000..9fda938201ad311c85d31538962d67745d48062f
--- /dev/null
+++ b/workflow1/codex-phase2-design/templates/Sprint0_Plan.md
@@ -0,0 +1,30 @@
+# Sprint 0 Readiness Plan
+
+## Goals
+- Establish environments, tooling, and baselines to start feature development.
+
+## Scope
+| Workstream | Tasks | Owner | Due | Status |
+| --- | --- | --- | --- | --- |
+| Architecture | Finalise ADRs, architecture diagrams | | | |
+| Contracts | Validate OpenAPI, mock server | | | |
+| Tooling | Configure CI skeleton (lint/test/build) | | | |
+| Backlog | Groom Sprint 1–2 stories with AC | | | |
+
+## Deliverables
+- Architecture pack approved
+- Repository policy enforced (branch protections, PR templates)
+- Environments provisioned with documented strategy
+
+## Risks & Mitigations
+| Risk | Impact | Mitigation | Owner | Status |
+| --- | --- | --- | --- | --- |
+| | | | | |
+
+## Dependencies
+- Upstream design decisions (list ADR IDs)
+- Security/compliance reviews scheduled
+
+## Exit Criteria
+- All tasks marked complete with evidence in `evidence/phase2`
+- Sign-off by Product + Engineering + QA leads
diff --git a/workflow1/codex-phase3-quality-rails/protocol.md b/workflow1/codex-phase3-quality-rails/protocol.md
new file mode 100644
index 0000000000000000000000000000000000000000..8cad8310a84c0365467b9cae9d4327086bb9156f
--- /dev/null
+++ b/workflow1/codex-phase3-quality-rails/protocol.md
@@ -0,0 +1,60 @@
+# Codex Phase 3 — Quality Rails Protocol
+
+This protocol extends `workflow1` Protocols 2–4 to fulfil AGENTS Phase 3 guardrail requirements covering security, performance, accessibility, analytics, testing, and code review controls.
+
+## Objectives
+- Install security/performance/accessibility gates before large-scale feature development.
+- Define analytics instrumentation and feature flag governance.
+- Ensure CI/CD pipelines enforce quality bars automatically.
+
+## Inputs
+- Phase 2 architecture + contract artefacts.
+- CI skeleton commands from `docs/LOCAL_DEV_WORKFLOW.md`.
+- Security/compliance policies from repository standards.
+
+## Required Artefacts
+- `templates/Security_Checklist.md`
+- `templates/perf/budgets.json`
+- `templates/A11y_Test_Plan.md`
+- `templates/Analytics_Spec.xlsx`
+- `templates/Feature_Flags.md`
+- `templates/Test_Plan.md`
+- `templates/Code_Review_Checklist.md`
+
+## Automation Scripts
+- `scripts/run_quality_gates.sh`
+  - Orchestrates lint/tests plus security/perf/a11y checks using repo automation.
+- `scripts/configure_feature_flags.py`
+  - Seeds flag configuration manifest and audit trail.
+
+## Procedure
+1. Copy templates into project docs (use `scripts/run_quality_gates.sh --bootstrap`).
+2. Map OWASP ASVS controls in `Security_Checklist.md` and create follow-up tickets.
+3. Define performance budgets in `perf/budgets.json` (Lighthouse or Web Vitals).
+4. Capture accessibility scope and tooling in `A11y_Test_Plan.md`.
+5. Build analytics taxonomy (events, properties) in `Analytics_Spec.xlsx`.
+6. Document feature flag lifecycle in `Feature_Flags.md` and generate config using script.
+7. Complete `Test_Plan.md` including coverage thresholds, smoke/integration cadence.
+8. Update `Code_Review_Checklist.md` aligning with Repo Policy.
+9. Run `scripts/run_quality_gates.sh` to verify automation and log evidence.
+
+## Exit Criteria
+- Security checklist complete with ASVS mapping and threat model summary.
+- Performance and accessibility budgets committed and enforced in CI.
+- Analytics spec approved by Data/PM stakeholders.
+- Feature flag manifest created and tracked in repo.
+- Test plan defined with metrics and gating thresholds.
+- Code review checklist adopted in repository settings.
+- CI pipeline demonstrates passing quality gates.
+
+## Dependencies
+- Node/JS runtime for Lighthouse budgets.
+- Python 3 for automation scripts.
+- Access to analytics tooling for schema validation.
+
+## Evidence Logging
+`run_quality_gates.sh` writes status to `../evidence/phase3/run.log` and `validation.md`. Manual approvals should be appended to the same evidence pack.
+
+## Related Protocols
+- Phase 2 protocol for architecture/contract context.
+- Phase 4+ protocols for integration, launch, and operations.
diff --git a/workflow1/codex-phase3-quality-rails/scripts/configure_feature_flags.py b/workflow1/codex-phase3-quality-rails/scripts/configure_feature_flags.py
new file mode 100644
index 0000000000000000000000000000000000000000..36bfe58eae0820b686b27791f239451a05e0d6b9
--- /dev/null
+++ b/workflow1/codex-phase3-quality-rails/scripts/configure_feature_flags.py
@@ -0,0 +1,109 @@
+#!/usr/bin/env python3
+"""Manage feature flag manifests for AGENTS Phase 3."""
+from __future__ import annotations
+
+import argparse
+import hashlib
+import json
+from datetime import datetime
+from pathlib import Path
+from typing import List, Dict
+
+ROOT = Path(__file__).resolve().parents[2]
+PHASE = "phase3"
+
+
+def sha256sum(path: Path) -> str:
+    h = hashlib.sha256()
+    with path.open("rb") as f:
+        for chunk in iter(lambda: f.read(8192), b""):
+            h.update(chunk)
+    return h.hexdigest()
+
+
+def load_manifest(manifest_path: Path) -> List[Dict[str, str]]:
+    if manifest_path.exists():
+        return json.loads(manifest_path.read_text())
+    return []
+
+
+def write_manifest(manifest_path: Path, entries: List[Dict[str, str]]) -> None:
+    manifest_path.write_text(json.dumps(entries, indent=2, sort_keys=True))
+
+
+def append_run_log(message: str) -> None:
+    log_path = ROOT / "evidence" / PHASE / "run.log"
+    log_path.parent.mkdir(parents=True, exist_ok=True)
+    timestamp = datetime.utcnow().isoformat() + "Z"
+    with log_path.open("a", encoding="utf-8") as handle:
+        handle.write(f"[{timestamp}] {message}\n")
+
+
+def parse_flag(raw: str) -> Dict[str, str]:
+    parts = [p.strip() for p in raw.split(":")]
+    if len(parts) < 3:
+        raise ValueError("Flag definitions must use key:type:owner format")
+    key, flag_type, owner, *rest = parts
+    description = rest[0] if rest else ""
+    return {
+        "key": key,
+        "type": flag_type,
+        "owner": owner,
+        "description": description,
+    }
+
+
+def update_flag_manifest(project: str, flags: List[Dict[str, str]]) -> Path:
+    dest = ROOT / "evidence" / PHASE / "outputs" / project / "quality-rails" / "feature_flags.json"
+    dest.parent.mkdir(parents=True, exist_ok=True)
+    data = {"project": project, "updated_at": datetime.utcnow().isoformat() + "Z", "flags": []}
+    if dest.exists():
+        try:
+            data = json.loads(dest.read_text())
+        except json.JSONDecodeError:
+            pass
+    existing = {flag["key"]: flag for flag in data.get("flags", [])}
+    for flag in flags:
+        existing[flag["key"]] = {**existing.get(flag["key"], {}), **flag}
+        existing[flag["key"]]["updated_at"] = datetime.utcnow().isoformat() + "Z"
+    data["flags"] = sorted(existing.values(), key=lambda x: x["key"])
+    dest.write_text(json.dumps(data, indent=2, sort_keys=True))
+    return dest
+
+
+def update_manifest_entries(project: str, files: List[Path]) -> None:
+    manifest_path = ROOT / "evidence" / PHASE / "manifest.json"
+    entries = load_manifest(manifest_path)
+    for path in files:
+        rel = path.relative_to(ROOT)
+        checksum = sha256sum(path)
+        entry = {
+            "phase": PHASE,
+            "project": project,
+            "file": str(rel),
+            "checksum": checksum,
+        }
+        entries = [e for e in entries if not (e.get("file") == entry["file"] and e.get("project") == project)]
+        entries.append(entry)
+    write_manifest(manifest_path, entries)
+
+
+def main() -> None:
+    parser = argparse.ArgumentParser(description=__doc__)
+    parser.add_argument("--project", required=True)
+    parser.add_argument("--flag", action="append", default=[], help="Flag definition key:type:owner[:description]")
+    args = parser.parse_args()
+
+    project = args.project.strip()
+    if not project:
+        raise SystemExit("Project slug cannot be empty")
+
+    flags = [parse_flag(raw) for raw in args.flag]
+    dest = update_flag_manifest(project, flags)
+    update_manifest_entries(project, [dest])
+    append_run_log(f"configure_feature_flags: updated manifest with {len(flags)} new flags for project '{project}'")
+    print(f"Feature flag manifest updated: {dest}")
+
+
+if __name__ == "__main__":
+    main()
diff --git a/workflow1/codex-phase3-quality-rails/scripts/run_quality_gates.sh b/workflow1/codex-phase3-quality-rails/scripts/run_quality_gates.sh
new file mode 100644
index 0000000000000000000000000000000000000000..a4443149d549e80ea04dee0fbd8bf6defcb806b6
--- /dev/null
+++ b/workflow1/codex-phase3-quality-rails/scripts/run_quality_gates.sh
@@ -0,0 +1,136 @@
+#!/usr/bin/env bash
+set -euo pipefail
+
+SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
+WORKFLOW_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"
+PHASE_DIR="$(cd "${SCRIPT_DIR}/.." && pwd)"
+EVIDENCE_DIR="${WORKFLOW_ROOT}/evidence/phase3"
+TEMPLATE_DIR="${PHASE_DIR}/templates"
+QUALITY_GATE_SCRIPT="${WORKFLOW_ROOT}/../quality_gate_simple.sh"
+PHASE="phase3"
+
+PROJECT=""
+BOOTSTRAP=0
+
+while [[ $# -gt 0 ]]; do
+  case "$1" in
+    --project)
+      PROJECT="$2"
+      shift 2
+      ;;
+    --bootstrap)
+      BOOTSTRAP=1
+      shift
+      ;;
+    *)
+      echo "Unknown argument: $1" >&2
+      exit 1
+      ;;
+  esac
+done
+
+if [[ -z "${PROJECT}" ]]; then
+  echo "--project <slug> is required" >&2
+  exit 1
+fi
+
+mkdir -p "${EVIDENCE_DIR}"
+RUN_LOG="${EVIDENCE_DIR}/run.log"
+VALIDATION_FILE="${EVIDENCE_DIR}/validation.md"
+MANIFEST_FILE="${EVIDENCE_DIR}/manifest.json"
+
+log() {
+  local message="$1"
+  local timestamp
+  timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
+  echo "[${timestamp}] ${message}" | tee -a "${RUN_LOG}"
+}
+
+update_manifest() {
+  local target_dir="$1"
+  python - "$MANIFEST_FILE" "$PROJECT" "$target_dir" "$WORKFLOW_ROOT" <<'PY'
+import json
+import sys
+from datetime import datetime
+from pathlib import Path
+import hashlib
+
+manifest_path = Path(sys.argv[1])
+project = sys.argv[2]
+target_dir = Path(sys.argv[3])
+root = Path(sys.argv[4])
+phase = "phase3"
+files = []
+if target_dir.exists():
+    for path in target_dir.rglob('*'):
+        if path.is_file():
+            files.append(path)
+entries = []
+if manifest_path.exists():
+    entries = json.loads(manifest_path.read_text())
+
+def checksum(path: Path) -> str:
+    h = hashlib.sha256()
+    with path.open('rb') as handle:
+        for chunk in iter(lambda: handle.read(8192), b''):
+            h.update(chunk)
+    return h.hexdigest()
+
+entries = [e for e in entries if not (e.get('project') == project and e.get('phase') == phase and e.get('file', '').startswith(str((target_dir).relative_to(root))))]
+for file in files:
+    rel = file.relative_to(root)
+    entries.append({
+        'phase': phase,
+        'project': project,
+        'file': str(rel),
+        'checksum': checksum(file),
+        'recorded_at': datetime.utcnow().isoformat() + 'Z'
+    })
+manifest_path.write_text(json.dumps(entries, indent=2, sort_keys=True))
+PY
+}
+
+if [[ ${BOOTSTRAP} -eq 1 ]]; then
+  DEST="${EVIDENCE_DIR}/outputs/${PROJECT}/quality-rails"
+  mkdir -p "${DEST}"
+  cp "${TEMPLATE_DIR}/Security_Checklist.md" "${DEST}/Security_Checklist.md"
+  cp "${TEMPLATE_DIR}/A11y_Test_Plan.md" "${DEST}/A11y_Test_Plan.md"
+  cp "${TEMPLATE_DIR}/Feature_Flags.md" "${DEST}/Feature_Flags.md"
+  cp "${TEMPLATE_DIR}/Test_Plan.md" "${DEST}/Test_Plan.md"
+  cp "${TEMPLATE_DIR}/Code_Review_Checklist.md" "${DEST}/Code_Review_Checklist.md"
+  mkdir -p "${DEST}/perf"
+  cp "${TEMPLATE_DIR}/perf/budgets.json" "${DEST}/perf/budgets.json"
+  cp "${TEMPLATE_DIR}/Analytics_Spec.xlsx" "${DEST}/Analytics_Spec.xlsx"
+  log "Bootstrapped quality rail templates for project '${PROJECT}'"
+  update_manifest "${DEST}"
+fi
+
+log "Running quality gate automation for project '${PROJECT}'"
+if [[ -x "${QUALITY_GATE_SCRIPT}" ]]; then
+  if "${QUALITY_GATE_SCRIPT}"; then
+    STATUS="PASS"
+  else
+    STATUS="FAIL"
+  fi
+else
+  log "quality_gate_simple.sh not executable or missing"
+  STATUS="FAIL"
+fi
+
+mkdir -p "${EVIDENCE_DIR}"
+if [[ ! -f "${VALIDATION_FILE}" ]]; then
+  cat <<'EOF_VALID' > "${VALIDATION_FILE}"
+# Phase 3 Validation Results
+
+| Timestamp | Project | Status | Notes |
+| --- | --- | --- | --- |
+EOF_VALID
+fi
+
+echo "| $(date -u +"%Y-%m-%dT%H:%M:%SZ") | ${PROJECT} | ${STATUS} | run_quality_gates.sh |" >> "${VALIDATION_FILE}"
+
+log "Quality gate status: ${STATUS}"
+
+if [[ "${STATUS}" == "FAIL" ]]; then
+  exit 1
+fi
diff --git a/workflow1/codex-phase3-quality-rails/templates/A11y_Test_Plan.md b/workflow1/codex-phase3-quality-rails/templates/A11y_Test_Plan.md
new file mode 100644
index 0000000000000000000000000000000000000000..c732fefedb28ac63408a7d8854653a0b38c55d82
--- /dev/null
+++ b/workflow1/codex-phase3-quality-rails/templates/A11y_Test_Plan.md
@@ -0,0 +1,33 @@
+# Accessibility Test Plan
+
+## Objectives
+- Achieve WCAG 2.2 AA compliance across core journeys.
+- Integrate automated and manual accessibility testing into CI/CD.
+
+## Scope
+| Journey | Assistive Tech | Browser | Status |
+| --- | --- | --- | --- |
+| | Screen reader (NVDA/JAWS) | Chrome/Edge | |
+| | Keyboard-only | Chrome/Firefox | |
+| | High contrast mode | Windows/Edge | |
+
+## Tooling
+- Automated: `axe-core`, `lighthouse --accessibility`, Storybook a11y add-on.
+- Manual: screen readers, keyboard walkthrough, colour contrast analyzers.
+
+## Test Cadence
+- Automated checks on every PR via `run_quality_gates.sh`.
+- Manual regression before each release candidate.
+
+## Defect Management
+- Severity scale (Blocker/Major/Minor).
+- SLA: Blockers fixed before release, Majors within 1 sprint, Minors within backlog triage.
+
+## Evidence
+- Store reports under `evidence/phase3/a11y`.
+- Link to issues created for remediation.
+
+## Approvals
+- Accessibility champion:
+- QA lead:
+- Product representative:
diff --git a/workflow1/codex-phase3-quality-rails/templates/Analytics_Spec.xlsx b/workflow1/codex-phase3-quality-rails/templates/Analytics_Spec.xlsx
new file mode 100644
index 0000000000000000000000000000000000000000..0fde6404169992e497b01729be4f5154c11b670a
GIT binary patch
literal 5772
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
Ys-=d5K0^Wkgy?S|x@ztH^dkZP0_cYdbN~PV

literal 0
HcmV?d00001

diff --git a/workflow1/codex-phase3-quality-rails/templates/Code_Review_Checklist.md b/workflow1/codex-phase3-quality-rails/templates/Code_Review_Checklist.md
new file mode 100644
index 0000000000000000000000000000000000000000..7f90624dad627d8e844971f198e55bbef0851189
--- /dev/null
+++ b/workflow1/codex-phase3-quality-rails/templates/Code_Review_Checklist.md
@@ -0,0 +1,37 @@
+# Code Review Checklist
+
+## General
+- [ ] PR description links to Product_Backlog item / ADR.
+- [ ] Tests updated/passing (unit, integration, e2e).
+- [ ] CHANGELOG entry added if user-facing (Phase 4 cross-link).
+
+## Security
+- [ ] Input validation and encoding confirmed.
+- [ ] AuthZ/AuthN changes documented.
+- [ ] Secrets/config handled via env strategy (no hard-coded secrets).
+
+## Performance
+- [ ] Impact against `perf/budgets.json` analysed.
+- [ ] Caching strategies documented.
+
+## Accessibility (UI)
+- [ ] Keyboard navigation works.
+- [ ] Colour contrast maintained.
+- [ ] ARIA attributes used correctly.
+
+## Analytics & Flags
+- [ ] Events align with `Analytics_Spec.xlsx`.
+- [ ] Feature flag keys exist in manifest; cleanup plan recorded.
+
+## Testing Discipline
+- [ ] Added/updated tests cover new code paths.
+- [ ] Flaky tests quarantined with owner + due date.
+
+## Documentation
+- [ ] README/runbooks updated if behaviour changed.
+- [ ] Observability hooks documented (logs/metrics/traces).
+
+## Approvals
+- Reviewer 1:
+- Reviewer 2:
+- Date:
diff --git a/workflow1/codex-phase3-quality-rails/templates/Feature_Flags.md b/workflow1/codex-phase3-quality-rails/templates/Feature_Flags.md
new file mode 100644
index 0000000000000000000000000000000000000000..69bc2d2cd18c3109b63a5ee20480b588e88f2969
--- /dev/null
+++ b/workflow1/codex-phase3-quality-rails/templates/Feature_Flags.md
@@ -0,0 +1,34 @@
+# Feature Flags Framework
+
+## Platform
+- Provider (LaunchDarkly, ConfigCat, homegrown, etc.):
+- SDKs: web | mobile | backend
+- Flag naming convention: `<area>_<feature>_<variant>`
+
+## Governance
+- Flag types: release, ops, permission, experiment.
+- Default TTL: 30 days (review at sprint retro).
+- Change management: PR + approvals required for permanent flags.
+
+## Flag Inventory
+| Flag Key | Type | Owner | Created | Target Segments | Removal Criteria | Notes |
+| --- | --- | --- | --- | --- | --- | --- |
+| | | | | | | |
+
+## Automation
+- Managed via `configure_feature_flags.py` (generates JSON manifest and audit log).
+- CI ensures flags referenced in code exist in manifest.
+
+## Monitoring
+- Analytics event `feature_toggled` tied to each evaluation.
+- Alert on stale flags > 60 days.
+
+## Cleanup Process
+1. Identify flags meeting removal criteria.
+2. Schedule removal PR and coordinate rollout.
+3. Update documentation/analytics to reflect removal.
+
+## Sign-off
+- Engineering lead:
+- Product manager:
+- Date:
diff --git a/workflow1/codex-phase3-quality-rails/templates/Security_Checklist.md b/workflow1/codex-phase3-quality-rails/templates/Security_Checklist.md
new file mode 100644
index 0000000000000000000000000000000000000000..aa8440c24a4e83077e16d38791bd17e8da48bc7d
--- /dev/null
+++ b/workflow1/codex-phase3-quality-rails/templates/Security_Checklist.md
@@ -0,0 +1,38 @@
+# Security Checklist (OWASP ASVS Mapping)
+
+## Threat Model Summary
+- Assets:
+- Adversaries:
+- Entry Points:
+- Controls:
+
+## Application Security Controls
+| Control ID | Description | Implementation | Evidence | Status |
+| --- | --- | --- | --- | --- |
+| ASVS-1.1 | Architecture, design, and threat modelling | Linked ADR | Threat model doc | |
+| ASVS-2.1 | Authentication mechanisms | Auth spec | Tests / code review | |
+| ASVS-3.2 | Session management | Session strategy | Tests | |
+| ASVS-5.3 | Input validation | Validation layer | Security tests | |
+| ASVS-7.5 | Access control | RBAC/ABAC | Tests + review | |
+| ASVS-10.1 | Logging/auditing | Observability spec | Log samples | |
+
+## Secure SDLC
+- Security champions:
+- Review cadence:
+- Dependency scanning tooling:
+- Secret scanning tooling:
+
+## Compliance & Privacy
+- Data classification:
+- Retention policy:
+- DPIA/PIA status:
+
+## Residual Risks
+| Risk | Impact | Mitigation | Owner | Due |
+| --- | --- | --- | --- | --- |
+| | | | | |
+
+## Sign-off
+- Security lead:
+- Engineering lead:
+- Date:
diff --git a/workflow1/codex-phase3-quality-rails/templates/Test_Plan.md b/workflow1/codex-phase3-quality-rails/templates/Test_Plan.md
new file mode 100644
index 0000000000000000000000000000000000000000..80dbcc1b07aae6a37e607ab83b0bf68143d25de1
--- /dev/null
+++ b/workflow1/codex-phase3-quality-rails/templates/Test_Plan.md
@@ -0,0 +1,41 @@
+# Test Plan
+
+## Strategy
+- Testing pyramid (unit, integration, end-to-end) with percentages.
+- Automation vs manual testing boundaries.
+
+## Coverage Targets
+| Layer | Owner | Tooling | Target Coverage | Evidence |
+| --- | --- | --- | --- | --- |
+| Unit | | pytest/jest | 80% | |
+| Integration | | Postman/Cypress | Critical paths | |
+| E2E | | Playwright | Smoke suite | |
+
+## Test Environments
+- Local: developer machines (docker-compose).
+- CI: ephemeral containers.
+- Staging: nightly regression.
+
+## Regression Schedule
+- Daily smoke via `run_quality_gates.sh`.
+- Weekly full regression.
+
+## Non-Functional Testing
+- Performance: see `perf/budgets.json`.
+- Accessibility: see `A11y_Test_Plan.md`.
+- Security: integrate with SAST/DAST.
+
+## Toolchain
+- Unit tests: `npm test` / `pytest`.
+- Linting: `eslint`, `black`, `mypy`.
+- Coverage reporting to CI dashboards.
+
+## Exit Criteria
+- All planned tests executed with pass rate ≥ 95%.
+- Defects triaged and tracked.
+- Sign-off captured below.
+
+## Approvals
+- QA lead:
+- Engineering lead:
+- Product owner:
diff --git a/workflow1/codex-phase3-quality-rails/templates/perf/budgets.json b/workflow1/codex-phase3-quality-rails/templates/perf/budgets.json
new file mode 100644
index 0000000000000000000000000000000000000000..999262915aebf562fe50aa5b819463915c9a7ac7
--- /dev/null
+++ b/workflow1/codex-phase3-quality-rails/templates/perf/budgets.json
@@ -0,0 +1,27 @@
+{
+  "metadata": {
+    "description": "Performance budgets aligned with AGENTS Phase 3 quality rails",
+    "owner": "performance-team",
+    "target_environment": "staging"
+  },
+  "budgets": [
+    {
+      "metric": "largest-contentful-paint",
+      "threshold_ms": 2500,
+      "tooling": "lighthouse",
+      "notes": "95th percentile on staging"
+    },
+    {
+      "metric": "cumulative-layout-shift",
+      "threshold": 0.1,
+      "tooling": "lighthouse",
+      "notes": "No layout shift regressions"
+    },
+    {
+      "metric": "server-response-time",
+      "threshold_ms": 300,
+      "tooling": "synthetic-monitor",
+      "notes": "API p95 latency"
+    }
+  ]
+}
diff --git a/workflow1/codex-phase4-integration/protocol.md b/workflow1/codex-phase4-integration/protocol.md
new file mode 100644
index 0000000000000000000000000000000000000000..51350d79db9eb34d2765cc636adb0e8d1f707d2e
--- /dev/null
+++ b/workflow1/codex-phase4-integration/protocol.md
@@ -0,0 +1,53 @@
+# Codex Phase 4 — Integration Protocol
+
+Extends `workflow1` Protocol 3–4 to deliver AGENTS Phase 4 outputs: staged integration, observability, and release readiness artefacts.
+
+## Objectives
+- Deliver features behind flags with reliable staging deployments.
+- Document observability strategy and draft SLO/SLIs.
+- Maintain changelog and smoke testing routines.
+
+## Inputs
+- Phase 2–3 artefacts (architecture, contracts, quality rails).
+- Feature backlog and flag manifest.
+- CI/CD pipelines.
+
+## Required Artefacts
+- `templates/Observability_Spec.md`
+- `templates/SLO_SLI.md`
+- `templates/CHANGELOG.md`
+- `templates/Staging_Smoke_Playbook.md`
+
+## Automation Scripts
+- `scripts/run_staging_smoke.sh`
+  - Executes smoke tests against staging and logs evidence.
+- `scripts/generate_observability_pack.py`
+  - Copies observability templates and injects metadata.
+
+## Procedure
+1. Ensure feature work is gated by flags per Phase 3 outputs.
+2. Run `python scripts/generate_observability_pack.py --project <slug>` to prepare docs.
+3. Execute staging deployments using repo CI/CD.
+4. Run `scripts/run_staging_smoke.sh --project <slug>` after each deployment.
+5. Update `CHANGELOG.md` entries for each feature toggle or release candidate.
+6. Draft initial SLO/SLI targets referencing performance budgets.
+7. Confirm telemetry pipelines (logs, metrics, traces) are operational.
+
+## Exit Criteria
+- Observability spec completed with log/metric/trace coverage.
+- SLO/SLI definitions approved by engineering + product leads.
+- Staging smoke playbook validated (green run recorded in evidence).
+- CHANGELOG initialised and linked to backlog items.
+- Staging stability metrics meet budgets (p75/p95 as defined).
+
+## Dependencies
+- Access to staging environment and credentials.
+- Smoke testing framework (e.g., Playwright/Cypress/Postman).
+- Observability stack (Grafana/Prometheus, Datadog, etc.).
+
+## Evidence Logging
+Scripts append to `../evidence/phase4/run.log`, populate `manifest.json`, and update `validation.md`. Manual approvals must be recorded as well.
+
+## Related Protocols
+- Phase 3 quality rails for gating.
+- Phase 5 for launch readiness.
diff --git a/workflow1/codex-phase4-integration/scripts/generate_observability_pack.py b/workflow1/codex-phase4-integration/scripts/generate_observability_pack.py
new file mode 100644
index 0000000000000000000000000000000000000000..b75daf798f558062e84065fbf06be20a9fb93105
--- /dev/null
+++ b/workflow1/codex-phase4-integration/scripts/generate_observability_pack.py
@@ -0,0 +1,108 @@
+#!/usr/bin/env python3
+"""Generate observability asset pack for Phase 4."""
+from __future__ import annotations
+
+import argparse
+import hashlib
+import json
+from datetime import datetime
+from pathlib import Path
+from typing import Dict, List
+
+ROOT = Path(__file__).resolve().parents[2]
+PHASE = "phase4"
+TEMPLATES = {
+    "Observability_Spec.md": Path("Observability_Spec.md"),
+    "SLO_SLI.md": Path("SLO_SLI.md"),
+    "CHANGELOG.md": Path("CHANGELOG.md"),
+    "Staging_Smoke_Playbook.md": Path("Staging_Smoke_Playbook.md"),
+}
+
+
+def sha256sum(path: Path) -> str:
+    h = hashlib.sha256()
+    with path.open("rb") as f:
+        for chunk in iter(lambda: f.read(8192), b""):
+            h.update(chunk)
+    return h.hexdigest()
+
+
+def load_manifest(manifest_path: Path) -> List[Dict[str, str]]:
+    if manifest_path.exists():
+        return json.loads(manifest_path.read_text())
+    return []
+
+
+def write_manifest(manifest_path: Path, entries: List[Dict[str, str]]) -> None:
+    manifest_path.write_text(json.dumps(entries, indent=2, sort_keys=True))
+
+
+def append_run_log(message: str) -> None:
+    log_path = ROOT / "evidence" / PHASE / "run.log"
+    timestamp = datetime.utcnow().isoformat() + "Z"
+    log_path.parent.mkdir(parents=True, exist_ok=True)
+    with log_path.open("a", encoding="utf-8") as handle:
+        handle.write(f"[{timestamp}] {message}\n")
+
+
+def copy_templates(project: str) -> List[Path]:
+    script_dir = Path(__file__).resolve().parent
+    template_root = script_dir.parent / "templates"
+    output_root = ROOT / "evidence" / PHASE / "outputs" / project / "integration"
+    output_root.mkdir(parents=True, exist_ok=True)
+
+    copied: List[Path] = []
+    for name, relative in TEMPLATES.items():
+        src = (template_root / relative).resolve()
+        if not src.exists():
+            raise FileNotFoundError(f"Missing template: {relative}")
+        dest = output_root / name
+        dest.write_bytes(src.read_bytes())
+        copied.append(dest)
+    return copied
+
+
+def update_manifest(project: str, files: List[Path]) -> None:
+    manifest_path = ROOT / "evidence" / PHASE / "manifest.json"
+    entries = load_manifest(manifest_path)
+    for path in files:
+        rel = path.relative_to(ROOT)
+        checksum = sha256sum(path)
+        entry = {
+            "phase": PHASE,
+            "project": project,
+            "file": str(rel),
+            "checksum": checksum,
+        }
+        entries = [e for e in entries if not (e.get("file") == entry["file"] and e.get("project") == project)]
+        entries.append(entry)
+    write_manifest(manifest_path, entries)
+
+
+
+def main() -> None:
+    parser = argparse.ArgumentParser(description=__doc__)
+    parser.add_argument("--project", required=True)
+    args = parser.parse_args()
+
+    project = args.project.strip()
+    if not project:
+        raise SystemExit("Project slug cannot be empty")
+
+    files = copy_templates(project)
+    update_manifest(project, files)
+    append_run_log(f"generate_observability_pack: copied {len(files)} files for project '{project}'")
+
+    validation = ROOT / "evidence" / PHASE / "validation.md"
+    if not validation.exists():
+        validation.write_text("# Phase 4 Validation Results\n\n| Timestamp | Project | Status | Artefact | Notes |\n| --- | --- | --- | --- | --- |\n")
+    timestamp = datetime.utcnow().isoformat() + "Z"
+    with validation.open("a", encoding="utf-8") as handle:
+        for path in files:
+            handle.write(f"| {timestamp} | {project} | PASS | {path.name} | Generated via script |\n")
+
+    print(f"Observability assets generated in {files[0].parent}")
+
+
+if __name__ == "__main__":
+    main()
diff --git a/workflow1/codex-phase4-integration/scripts/run_staging_smoke.sh b/workflow1/codex-phase4-integration/scripts/run_staging_smoke.sh
new file mode 100644
index 0000000000000000000000000000000000000000..f346968b86935c03c20fd4a37c89044f290df6a5
--- /dev/null
+++ b/workflow1/codex-phase4-integration/scripts/run_staging_smoke.sh
@@ -0,0 +1,114 @@
+#!/usr/bin/env bash
+set -euo pipefail
+
+SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
+WORKFLOW_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"
+EVIDENCE_DIR="${WORKFLOW_ROOT}/evidence/phase4"
+
+PROJECT=""
+RESULT="pass"
+REPORT=""
+
+while [[ $# -gt 0 ]]; do
+  case "$1" in
+    --project)
+      PROJECT="$2"
+      shift 2
+      ;;
+    --result)
+      RESULT="$2"
+      shift 2
+      ;;
+    --report)
+      REPORT="$2"
+      shift 2
+      ;;
+    *)
+      echo "Unknown argument: $1" >&2
+      exit 1
+      ;;
+  esac
+done
+
+if [[ -z "${PROJECT}" ]]; then
+  echo "--project <slug> is required" >&2
+  exit 1
+fi
+
+mkdir -p "${EVIDENCE_DIR}"
+RUN_LOG="${EVIDENCE_DIR}/run.log"
+VALIDATION_FILE="${EVIDENCE_DIR}/validation.md"
+MANIFEST_FILE="${EVIDENCE_DIR}/manifest.json"
+REPORT_DIR="${EVIDENCE_DIR}/outputs/${PROJECT}/integration"
+mkdir -p "${REPORT_DIR}"
+
+if [[ -z "${REPORT}" ]]; then
+  REPORT="${REPORT_DIR}/staging_smoke_report.txt"
+fi
+
+cat <<EOF_REPORT > "${REPORT}"
+Staging smoke execution
+Project: ${PROJECT}
+Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
+Result: ${RESULT}
+Notes: Placeholder smoke report. Replace with real test output.
+EOF_REPORT
+
+python - <<'PY' "$MANIFEST_FILE" "$PROJECT" "$REPORT" "$WORKFLOW_ROOT"
+import json
+import sys
+import hashlib
+from datetime import datetime
+from pathlib import Path
+
+manifest_path = Path(sys.argv[1])
+project = sys.argv[2]
+report = Path(sys.argv[3])
+root = Path(sys.argv[4])
+phase = "phase4"
+entries = []
+if manifest_path.exists():
+    entries = json.loads(manifest_path.read_text())
+
+def checksum(path: Path) -> str:
+    h = hashlib.sha256()
+    with path.open('rb') as handle:
+        for chunk in iter(lambda: handle.read(8192), b''):
+            h.update(chunk)
+    return h.hexdigest()
+
+entries = [e for e in entries if not (e.get('file') == str(report.relative_to(root)) and e.get('project') == project)]
+entries.append({
+    'phase': phase,
+    'project': project,
+    'file': str(report.relative_to(root)),
+    'checksum': checksum(report),
+    'recorded_at': datetime.utcnow().isoformat() + 'Z'
+})
+manifest_path.write_text(json.dumps(entries, indent=2, sort_keys=True))
+PY
+
+STATUS="PASS"
+if [[ "${RESULT}" != "pass" ]]; then
+  STATUS="FAIL"
+fi
+
+TIMESTAMP="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
+echo "[${TIMESTAMP}] run_staging_smoke: project=${PROJECT} status=${STATUS} report=${REPORT}" >> "${RUN_LOG}"
+
+if [[ ! -f "${VALIDATION_FILE}" ]]; then
+  cat <<'EOF_VALID' > "${VALIDATION_FILE}"
+# Phase 4 Validation Results
+
+| Timestamp | Project | Status | Artefact | Notes |
+| --- | --- | --- | --- | --- |
+EOF_VALID
+fi
+
+echo "| ${TIMESTAMP} | ${PROJECT} | ${STATUS} | $(basename "${REPORT}") | run_staging_smoke.sh |" >> "${VALIDATION_FILE}"
+
+echo "Staging smoke ${STATUS} (report: ${REPORT})"
+
+if [[ "${STATUS}" == "FAIL" ]]; then
+  exit 1
+fi
diff --git a/workflow1/codex-phase4-integration/templates/CHANGELOG.md b/workflow1/codex-phase4-integration/templates/CHANGELOG.md
new file mode 100644
index 0000000000000000000000000000000000000000..3354dbc599bbb92145b87046cd7db4860d99eaa6
--- /dev/null
+++ b/workflow1/codex-phase4-integration/templates/CHANGELOG.md
@@ -0,0 +1,23 @@
+# Changelog
+
+All notable changes for the project. Documented per [Keep a Changelog](https://keepachangelog.com/) standards. Link entries to backlog IDs and feature flags.
+
+## [Unreleased]
+### Added
+- Initial scaffolding for Phase 4 integration assets.
+
+### Changed
+- 
+
+### Fixed
+- 
+
+### Security
+- 
+
+## [YYYY-MM-DD] - v0.1.0
+### Added
+- Initial release candidate ready for staging smoke.
+
+### Notes
+- Reference evidence logs under `evidence/phase4`.
diff --git a/workflow1/codex-phase4-integration/templates/Observability_Spec.md b/workflow1/codex-phase4-integration/templates/Observability_Spec.md
new file mode 100644
index 0000000000000000000000000000000000000000..9faa8ccc452245bc390bf8fc73716528784df3dd
--- /dev/null
+++ b/workflow1/codex-phase4-integration/templates/Observability_Spec.md
@@ -0,0 +1,42 @@
+# Observability Specification
+
+## Objectives
+- Define logs, metrics, and traces required to monitor golden journeys.
+
+## Architecture Links
+- Reference Architecture.md sections: []
+- Feature flags impacting telemetry: []
+
+## Logging
+| Component | Log Format | PII Handling | Retention | Notes |
+| --- | --- | --- | --- | --- |
+| API | JSON | Mask sensitive fields | 30 days | |
+
+## Metrics
+| Metric | Type | Source | Frequency | Threshold | Dashboard |
+| --- | --- | --- | --- | --- | --- |
+| api.request.latency | Histogram | OpenTelemetry | Real-time | p95 < 300ms | Grafana: API Latency |
+| web.vitals.lcp | Gauge | Web RUM | Real-time | p75 < 2.5s | Grafana: Web Vitals |
+
+## Traces
+- Trace IDs propagate via W3C Trace Context.
+- Critical spans: web request, service processing, external dependency.
+- Sampling rate: 50% in staging, 10% in production (adjust as needed).
+
+## Alerting
+| Alert | Condition | Channel | Runbook |
+| --- | --- | --- | --- |
+| API latency breach | p95 latency > 300ms for 5m | PagerDuty | Link to Deployment_Runbook.md |
+| Error rate spike | Error rate > 2% | Slack #alerts | Link to Postmortem_Template.md |
+
+## Dashboards
+- Link to Grafana dashboards, include screenshot references.
+
+## Validation
+- Observability smoke executed via `generate_observability_pack.py` logging.
+- Ensure metrics exist before Phase 5 sign-off.
+
+## Approval
+- SRE lead:
+- Engineering lead:
+- Product:
diff --git a/workflow1/codex-phase4-integration/templates/SLO_SLI.md b/workflow1/codex-phase4-integration/templates/SLO_SLI.md
new file mode 100644
index 0000000000000000000000000000000000000000..c5da18a9b05d4dc0c8cafc17e568cc43d6b299ff
--- /dev/null
+++ b/workflow1/codex-phase4-integration/templates/SLO_SLI.md
@@ -0,0 +1,35 @@
+# SLO / SLI Definition
+
+## Service Overview
+- Service name:
+- Critical user journeys:
+
+## Service Level Indicators
+| ID | Indicator | Type | Measurement | Target | Source |
+| --- | --- | --- | --- | --- | --- |
+| SLI-001 | Availability | Ratio | Successful requests / total | ≥ 99.5% monthly | Observability stack |
+| SLI-002 | Latency | Histogram | p95 response time | ≤ 300ms | OpenTelemetry |
+| SLI-003 | Error Rate | Ratio | 5xx responses | ≤ 1% | API gateway |
+
+## Service Level Objectives
+| Objective | Indicator | Target | Window | Burn Rate Alert |
+| --- | --- | --- | --- | --- |
+| Keep availability ≥ 99.5% | SLI-001 | 99.5% | 30 days | 14x / 2h |
+| Keep latency ≤ 300ms | SLI-002 | 300ms | 7 days | 6x / 1h |
+
+## Error Budgets
+- Monthly error budget (minutes):
+- Policy for budget exhaustion:
+
+## Review Cadence
+- Weekly review in Ops meeting.
+- Monthly exec summary.
+
+## Links
+- Observability dashboards
+- Incident response playbooks
+
+## Sign-off
+- SRE lead:
+- Product lead:
+- Date:
diff --git a/workflow1/codex-phase4-integration/templates/Staging_Smoke_Playbook.md b/workflow1/codex-phase4-integration/templates/Staging_Smoke_Playbook.md
new file mode 100644
index 0000000000000000000000000000000000000000..0688076bd59da0b09f3b149344acd173d52ff947
--- /dev/null
+++ b/workflow1/codex-phase4-integration/templates/Staging_Smoke_Playbook.md
@@ -0,0 +1,28 @@
+# Staging Smoke Test Playbook
+
+## Purpose
+Validate staging deployments before promoting to production.
+
+## Preconditions
+- Deployment completed and feature flags configured.
+- Observability dashboards healthy.
+
+## Smoke Suite
+| Step | Description | Tool | Expected Result | Owner |
+| --- | --- | --- | --- | --- |
+| 1 | User login | Playwright | Success | QA |
+| 2 | Critical API call | Postman | 200 OK | QA |
+| 3 | Feature flag toggle | CLI/API | Response OK | Dev |
+| 4 | Error monitoring | Observability dashboard | No new alerts | SRE |
+
+## Rollback Triggers
+- Smoke failure > 1 critical step.
+- Error rate > 2% after deployment.
+
+## Evidence Capture
+- Attach screenshots/logs to `evidence/phase4/run.log` and `validation.md`.
+
+## Sign-off
+- QA lead:
+- Engineering lead:
+- Product manager:
diff --git a/workflow1/codex-phase5-launch/protocol.md b/workflow1/codex-phase5-launch/protocol.md
new file mode 100644
index 0000000000000000000000000000000000000000..726ce5df500e7983b4806087805a5c007dfec1e5
--- /dev/null
+++ b/workflow1/codex-phase5-launch/protocol.md
@@ -0,0 +1,59 @@
+# Codex Phase 5 — Launch Readiness Protocol
+
+Extends `workflow1` Protocol 4–5 to satisfy AGENTS Phase 5 hardening requirements.
+
+## Objectives
+- Finalise deployment, rollback, DR, and observability plans for production.
+- Ensure documentation, SEO (if public), and compliance sign-offs complete.
+- Record rehearsal evidence and go-live readiness.
+
+## Inputs
+- Phase 4 integration assets (observability, SLO/SLI, CHANGELOG, smoke logs).
+- Feature backlog and release notes draft.
+- On-call rotation and incident management process.
+
+## Required Artefacts
+- `templates/Deployment_Runbook.md`
+- `templates/Rollback_Plan.md`
+- `templates/Prod_Observability.md`
+- `templates/Backup_Policy.md`
+- `templates/DR_Plan.md`
+- `templates/GoLive_Checklist.md`
+- `templates/Release_Notes.md`
+- `templates/SEO_Checklist.md`
+
+## Automation Scripts
+- `scripts/rehearse_rollback.sh`
+  - Simulates rollback procedure, captures evidence, updates manifest.
+- `scripts/verify_dr_restore.sh`
+  - Logs backup/restore validation output for audit trails.
+
+## Procedure
+1. Copy templates into project documentation using automation scripts.
+2. Populate deployment and rollback details, including on-call contacts.
+3. Run `scripts/rehearse_rollback.sh --project <slug>` to capture rehearsal evidence.
+4. Execute DR test per `verify_dr_restore.sh --project <slug>`.
+5. Finalise `GoLive_Checklist.md` and ensure all items have status + owners.
+6. Update `Release_Notes.md` with version details, features, and known issues.
+7. Complete `SEO_Checklist.md` if product is public-facing.
+8. Record approvals in evidence pack and confirm readiness with stakeholders.
+
+## Exit Criteria
+- Deployment runbook and rollback plan approved and rehearsed.
+- Backup and DR strategy validated with timestamped evidence.
+- Production observability plan signed off (dashboards, alerts, runbooks).
+- Go-Live checklist 100% complete with approvals.
+- Release notes published and distributed to stakeholders.
+- SEO checklist complete or explicitly not applicable.
+
+## Dependencies
+- Access to staging/prod-like environment for rehearsal.
+- On-call tooling (PagerDuty, Opsgenie) configured.
+- Compliance/legal approvals captured.
+
+## Evidence Logging
+Scripts append to `../evidence/phase5/run.log`, update `manifest.json`, and add PASS/FAIL entries to `validation.md`. Manual sign-offs must be logged as well.
+
+## Related Protocols
+- Phase 4 integration for upstream readiness.
+- Phase 6 operations for post-launch activities.
diff --git a/workflow1/codex-phase5-launch/scripts/rehearse_rollback.sh b/workflow1/codex-phase5-launch/scripts/rehearse_rollback.sh
new file mode 100644
index 0000000000000000000000000000000000000000..65f7ddef15e8caf22cd93f60b1324aa55c24aff0
--- /dev/null
+++ b/workflow1/codex-phase5-launch/scripts/rehearse_rollback.sh
@@ -0,0 +1,112 @@
+#!/usr/bin/env bash
+set -euo pipefail
+
+SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
+WORKFLOW_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"
+EVIDENCE_DIR="${WORKFLOW_ROOT}/evidence/phase5"
+
+PROJECT=""
+RESULT="pass"
+NOTES=""
+
+while [[ $# -gt 0 ]]; do
+  case "$1" in
+    --project)
+      PROJECT="$2"
+      shift 2
+      ;;
+    --result)
+      RESULT="$2"
+      shift 2
+      ;;
+    --notes)
+      NOTES="$2"
+      shift 2
+      ;;
+    *)
+      echo "Unknown argument: $1" >&2
+      exit 1
+      ;;
+  esac
+done
+
+if [[ -z "${PROJECT}" ]]; then
+  echo "--project <slug> is required" >&2
+  exit 1
+fi
+
+mkdir -p "${EVIDENCE_DIR}"
+RUN_LOG="${EVIDENCE_DIR}/run.log"
+VALIDATION_FILE="${EVIDENCE_DIR}/validation.md"
+MANIFEST_FILE="${EVIDENCE_DIR}/manifest.json"
+OUTPUT_DIR="${EVIDENCE_DIR}/outputs/${PROJECT}/launch"
+mkdir -p "${OUTPUT_DIR}"
+
+REPORT="${OUTPUT_DIR}/rollback_rehearsal.txt"
+TIMESTAMP="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
+cat <<EOF_REPORT > "${REPORT}"
+Rollback rehearsal report
+Project: ${PROJECT}
+Timestamp: ${TIMESTAMP}
+Result: ${RESULT}
+Notes: ${NOTES}
+Steps executed: refer to Rollback_Plan.md
+EOF_REPORT
+
+python - <<'PY' "$MANIFEST_FILE" "$PROJECT" "$REPORT" "$WORKFLOW_ROOT"
+import json
+import sys
+import hashlib
+from datetime import datetime
+from pathlib import Path
+
+manifest_path = Path(sys.argv[1])
+project = sys.argv[2]
+report = Path(sys.argv[3])
+root = Path(sys.argv[4])
+phase = "phase5"
+entries = []
+if manifest_path.exists():
+    entries = json.loads(manifest_path.read_text())
+
+def checksum(path: Path) -> str:
+    h = hashlib.sha256()
+    with path.open('rb') as handle:
+        for chunk in iter(lambda: handle.read(8192), b''):
+            h.update(chunk)
+    return h.hexdigest()
+
+entries = [e for e in entries if not (e.get('file') == str(report.relative_to(root)) and e.get('project') == project)]
+entries.append({
+    'phase': phase,
+    'project': project,
+    'file': str(report.relative_to(root)),
+    'checksum': checksum(report),
+    'recorded_at': datetime.utcnow().isoformat() + 'Z'
+})
+manifest_path.write_text(json.dumps(entries, indent=2, sort_keys=True))
+PY
+
+STATUS="PASS"
+if [[ "${RESULT}" != "pass" ]]; then
+  STATUS="FAIL"
+fi
+
+echo "[${TIMESTAMP}] rehearse_rollback: project=${PROJECT} status=${STATUS} report=${REPORT}" >> "${RUN_LOG}"
+
+if [[ ! -f "${VALIDATION_FILE}" ]]; then
+  cat <<'EOF_VALID' > "${VALIDATION_FILE}"
+# Phase 5 Validation Results
+
+| Timestamp | Project | Status | Artefact | Notes |
+| --- | --- | --- | --- | --- |
+EOF_VALID
+fi
+
+echo "| ${TIMESTAMP} | ${PROJECT} | ${STATUS} | $(basename "${REPORT}") | rehearse_rollback.sh ${NOTES} |" >> "${VALIDATION_FILE}"
+
+echo "Rollback rehearsal ${STATUS} (report: ${REPORT})"
+
+if [[ "${STATUS}" == "FAIL" ]]; then
+  exit 1
+fi
diff --git a/workflow1/codex-phase5-launch/scripts/verify_dr_restore.sh b/workflow1/codex-phase5-launch/scripts/verify_dr_restore.sh
new file mode 100644
index 0000000000000000000000000000000000000000..2f3fc0c27ad419b2b2757555cc74ec59dd4ada3d
--- /dev/null
+++ b/workflow1/codex-phase5-launch/scripts/verify_dr_restore.sh
@@ -0,0 +1,112 @@
+#!/usr/bin/env bash
+set -euo pipefail
+
+SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
+WORKFLOW_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"
+EVIDENCE_DIR="${WORKFLOW_ROOT}/evidence/phase5"
+
+PROJECT=""
+RESULT="pass"
+RESTORE_TIME=""
+
+while [[ $# -gt 0 ]]; do
+  case "$1" in
+    --project)
+      PROJECT="$2"
+      shift 2
+      ;;
+    --result)
+      RESULT="$2"
+      shift 2
+      ;;
+    --restore-time)
+      RESTORE_TIME="$2"
+      shift 2
+      ;;
+    *)
+      echo "Unknown argument: $1" >&2
+      exit 1
+      ;;
+  esac
+done
+
+if [[ -z "${PROJECT}" ]]; then
+  echo "--project <slug> is required" >&2
+  exit 1
+fi
+
+mkdir -p "${EVIDENCE_DIR}"
+RUN_LOG="${EVIDENCE_DIR}/run.log"
+VALIDATION_FILE="${EVIDENCE_DIR}/validation.md"
+MANIFEST_FILE="${EVIDENCE_DIR}/manifest.json"
+OUTPUT_DIR="${EVIDENCE_DIR}/outputs/${PROJECT}/launch"
+mkdir -p "${OUTPUT_DIR}"
+
+REPORT="${OUTPUT_DIR}/dr_restore_report.txt"
+TIMESTAMP="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
+cat <<EOF_REPORT > "${REPORT}"
+DR restore verification
+Project: ${PROJECT}
+Timestamp: ${TIMESTAMP}
+Result: ${RESULT}
+Restore Time: ${RESTORE_TIME}
+Steps executed: Refer to DR_Plan.md
+EOF_REPORT
+
+python - <<'PY' "$MANIFEST_FILE" "$PROJECT" "$REPORT" "$WORKFLOW_ROOT"
+import json
+import sys
+import hashlib
+from datetime import datetime
+from pathlib import Path
+
+manifest_path = Path(sys.argv[1])
+project = sys.argv[2]
+report = Path(sys.argv[3])
+root = Path(sys.argv[4])
+phase = "phase5"
+entries = []
+if manifest_path.exists():
+    entries = json.loads(manifest_path.read_text())
+
+def checksum(path: Path) -> str:
+    h = hashlib.sha256()
+    with path.open('rb') as handle:
+        for chunk in iter(lambda: handle.read(8192), b''):
+            h.update(chunk)
+    return h.hexdigest()
+
+entries = [e for e in entries if not (e.get('file') == str(report.relative_to(root)) and e.get('project') == project)]
+entries.append({
+    'phase': phase,
+    'project': project,
+    'file': str(report.relative_to(root)),
+    'checksum': checksum(report),
+    'recorded_at': datetime.utcnow().isoformat() + 'Z'
+})
+manifest_path.write_text(json.dumps(entries, indent=2, sort_keys=True))
+PY
+
+STATUS="PASS"
+if [[ "${RESULT}" != "pass" ]]; then
+  STATUS="FAIL"
+fi
+
+echo "[${TIMESTAMP}] verify_dr_restore: project=${PROJECT} status=${STATUS} report=${REPORT}" >> "${RUN_LOG}"
+
+if [[ ! -f "${VALIDATION_FILE}" ]]; then
+  cat <<'EOF_VALID' > "${VALIDATION_FILE}"
+# Phase 5 Validation Results
+
+| Timestamp | Project | Status | Artefact | Notes |
+| --- | --- | --- | --- | --- |
+EOF_VALID
+fi
+
+echo "| ${TIMESTAMP} | ${PROJECT} | ${STATUS} | $(basename "${REPORT}") | verify_dr_restore.sh ${RESTORE_TIME} |" >> "${VALIDATION_FILE}"
+
+echo "DR restore verification ${STATUS} (report: ${REPORT})"
+
+if [[ "${STATUS}" == "FAIL" ]]; then
+  exit 1
+fi
diff --git a/workflow1/codex-phase5-launch/templates/Backup_Policy.md b/workflow1/codex-phase5-launch/templates/Backup_Policy.md
new file mode 100644
index 0000000000000000000000000000000000000000..f94e6cb263548b565e5036a5760f0dd9e2178d27
--- /dev/null
+++ b/workflow1/codex-phase5-launch/templates/Backup_Policy.md
@@ -0,0 +1,29 @@
+# Backup Policy
+
+## Scope
+- Systems covered (databases, object storage, configurations).
+
+## Backup Schedule
+| System | Frequency | Retention | Storage Location | Encryption |
+| --- | --- | --- | --- | --- |
+| PostgreSQL | Hourly incrementals, daily full | 30 days | S3 bucket | AES-256 |
+| Object Storage | Daily differential | 14 days | S3 bucket | AES-256 |
+
+## Responsibilities
+- Backup owner:
+- Verification owner:
+
+## Verification & Testing
+- Automated restore tests weekly.
+- Quarterly full DR exercise.
+
+## Compliance
+- Aligns with policy/regulations (e.g., GDPR, SOC2).
+
+## Evidence
+- See `verify_dr_restore.sh` logs.
+
+## Sign-off
+- Infrastructure lead:
+- Security/compliance:
+- Date:
diff --git a/workflow1/codex-phase5-launch/templates/DR_Plan.md b/workflow1/codex-phase5-launch/templates/DR_Plan.md
new file mode 100644
index 0000000000000000000000000000000000000000..377977e71cdd51ee276c531e860e92c4d44e3b5f
--- /dev/null
+++ b/workflow1/codex-phase5-launch/templates/DR_Plan.md
@@ -0,0 +1,33 @@
+# Disaster Recovery Plan
+
+## Objectives
+- Restore critical services within defined RTO/RPO.
+
+## RTO / RPO Targets
+| Service | RTO | RPO | Notes |
+| --- | --- | --- | --- |
+| API Platform | 1 hour | 15 minutes | |
+| Data Warehouse | 4 hours | 1 hour | |
+
+## DR Runbook
+1. Declare incident and form DR team.
+2. Assess impact and determine recovery strategy.
+3. Restore infrastructure (list scripts/commands).
+4. Validate application functionality.
+5. Communicate status to stakeholders.
+
+## Testing Schedule
+- Semi-annual full DR tests.
+- Monthly table-top exercises.
+
+## Dependencies
+- Backup policy alignment.
+- Third-party SLAs (list).
+
+## Evidence
+- Attach test results from `verify_dr_restore.sh`.
+
+## Sign-off
+- DR owner:
+- Compliance:
+- Date:
diff --git a/workflow1/codex-phase5-launch/templates/Deployment_Runbook.md b/workflow1/codex-phase5-launch/templates/Deployment_Runbook.md
new file mode 100644
index 0000000000000000000000000000000000000000..1fefff0eb3cd809cc94489b7135d2f1419dfa430
--- /dev/null
+++ b/workflow1/codex-phase5-launch/templates/Deployment_Runbook.md
@@ -0,0 +1,38 @@
+# Deployment Runbook
+
+## Overview
+- Service:
+- Release version:
+- Deployment window:
+
+## Pre-Deployment Checklist
+- [ ] Change approved (link to ticket)
+- [ ] Release notes published
+- [ ] On-call notified
+- [ ] Backups verified within SLA
+
+## Deployment Steps
+| Step | Description | Command / Link | Owner | Status |
+| --- | --- | --- | --- | --- |
+| 1 | Tag release | `git tag vX.Y.Z` | | |
+| 2 | Trigger pipeline | CI/CD URL | | |
+| 3 | Run database migrations | `alembic upgrade head` | | |
+| 4 | Verify smoke tests | `scripts/run_staging_smoke.sh` | | |
+
+## Post-Deployment Verification
+- Metrics dashboard: []
+- Error tracking: []
+- Feature flag toggles: []
+
+## Rollback Reference
+- Link to `Rollback_Plan.md`
+
+## Contacts
+- Primary on-call:
+- Backup:
+- Product:
+
+## Sign-off
+- Engineering lead:
+- Product lead:
+- SRE lead:
diff --git a/workflow1/codex-phase5-launch/templates/GoLive_Checklist.md b/workflow1/codex-phase5-launch/templates/GoLive_Checklist.md
new file mode 100644
index 0000000000000000000000000000000000000000..e15dea85c79f018911250d12070f8b7ffaff6618
--- /dev/null
+++ b/workflow1/codex-phase5-launch/templates/GoLive_Checklist.md
@@ -0,0 +1,20 @@
+# Go-Live Checklist
+
+| Item | Owner | Status | Evidence | Notes |
+| --- | --- | --- | --- | --- |
+| Deployment Runbook approved | | ☐ | | |
+| Rollback rehearsal complete | | ☐ | rehearse_rollback.sh | |
+| DR restore validated | | ☐ | verify_dr_restore.sh | |
+| Prod observability dashboards ready | | ☐ | | |
+| Alerts tuned and on-call prepared | | ☐ | | |
+| Legal/privacy sign-off | | ☐ | | |
+| Security review complete | | ☐ | Security_Checklist.md | |
+| Accessibility sign-off | | ☐ | A11y_Test_Plan.md | |
+| Release notes published | | ☐ | Release_Notes.md | |
+| SEO checklist complete / N/A | | ☐ | SEO_Checklist.md | |
+
+## Approval
+- Product:
+- Engineering:
+- SRE:
+- Date:
diff --git a/workflow1/codex-phase5-launch/templates/Prod_Observability.md b/workflow1/codex-phase5-launch/templates/Prod_Observability.md
new file mode 100644
index 0000000000000000000000000000000000000000..4ec59bb59730df652c315dc5b39ffb4e9ccb258c
--- /dev/null
+++ b/workflow1/codex-phase5-launch/templates/Prod_Observability.md
@@ -0,0 +1,37 @@
+# Production Observability Plan
+
+## Objectives
+- Ensure proactive monitoring and alerting post-launch.
+
+## Dashboards
+| Dashboard | Link | Owner | Purpose |
+| --- | --- | --- | --- |
+| Prod API Health | | SRE | Monitor latency/errors |
+| User Journeys | | Product Analytics | Track key flows |
+
+## Alerts
+| Alert | Condition | Channel | Runbook |
+| --- | --- | --- | --- |
+| API Latency | p95 > 300ms for 5m | PagerDuty | Deployment_Runbook.md |
+| Error Rate | Error rate > 2% | Slack #alerts | Postmortem_Template.md |
+
+## Logging & Tracing
+- Log retention: 30 days (hot), 180 days (archive).
+- Trace sampling: 10% production, 50% staging.
+
+## On-Call Rotation
+- Primary schedule: []
+- Secondary schedule: []
+- Escalation matrix: []
+
+## Runbooks
+- Link to `Deployment_Runbook.md`, `Rollback_Plan.md`, `DR_Plan.md`.
+
+## Validation
+- Dashboards reviewed on (date).
+- Alerts tested via synthetic events (link evidence).
+
+## Sign-off
+- SRE lead:
+- Engineering lead:
+- Product lead:
diff --git a/workflow1/codex-phase5-launch/templates/Release_Notes.md b/workflow1/codex-phase5-launch/templates/Release_Notes.md
new file mode 100644
index 0000000000000000000000000000000000000000..87f8d5e35d42142b9dd12fbbbcf5057fbac44455
--- /dev/null
+++ b/workflow1/codex-phase5-launch/templates/Release_Notes.md
@@ -0,0 +1,29 @@
+# Release Notes
+
+## Version
+- Version number:
+- Release date:
+- Deployment window:
+
+## Highlights
+- Feature 1 (link to backlog/flag)
+- Feature 2
+
+## Fixes
+- Bug fix references
+
+## Known Issues
+- Item + workaround
+
+## Upgrade Notes
+- Migration steps
+- Rollback considerations
+
+## Contact
+- Support channel:
+- On-call contact:
+
+## Approvals
+- Product:
+- Engineering:
+- Support/Success:
diff --git a/workflow1/codex-phase5-launch/templates/Rollback_Plan.md b/workflow1/codex-phase5-launch/templates/Rollback_Plan.md
new file mode 100644
index 0000000000000000000000000000000000000000..e98dad1114c4c8b273fb5615b9d9afe57f459575
--- /dev/null
+++ b/workflow1/codex-phase5-launch/templates/Rollback_Plan.md
@@ -0,0 +1,37 @@
+# Rollback Plan
+
+## Trigger Conditions
+- Smoke test failure
+- Error budget burn > threshold
+- Critical incident declared
+
+## Rollback Options
+| Option | Description | Estimated Time | Risks | Owner |
+| --- | --- | --- | --- | --- |
+| Blue/Green | Switch traffic to previous version | 5 min | Requires warm standby | SRE |
+| Database rollback | Restore backup snapshot | 20 min | Possible data loss | DBA |
+
+## Procedure
+1. Announce rollback in communication channels.
+2. Disable feature flags if applicable.
+3. Execute rollback command (document exact steps).
+4. Verify system health (metrics, logs, alerts).
+5. Update incident ticket with status.
+
+## Validation
+- Rehearsed on: (date)
+- Evidence: link to `rehearse_rollback.sh` output
+
+## Communication Plan
+- Stakeholders notified via email/Slack.
+- Incident commander:
+- External comms contact:
+
+## Post-Rollback Actions
+- Root cause analysis
+- Follow-up tasks recorded in backlog
+
+## Sign-off
+- SRE lead:
+- Engineering lead:
+- Product lead:
diff --git a/workflow1/codex-phase5-launch/templates/SEO_Checklist.md b/workflow1/codex-phase5-launch/templates/SEO_Checklist.md
new file mode 100644
index 0000000000000000000000000000000000000000..4b4df18198b9d22e973073260c2456276a05602e
--- /dev/null
+++ b/workflow1/codex-phase5-launch/templates/SEO_Checklist.md
@@ -0,0 +1,20 @@
+# SEO Checklist
+
+| Item | Status | Owner | Evidence |
+| --- | --- | --- | --- |
+| robots.txt updated | ☐ | | |
+| Sitemap submitted | ☐ | | |
+| Meta titles/descriptions reviewed | ☐ | | |
+| Structured data validated | ☐ | | |
+| Page speed budgets met | ☐ | Link to perf/budgets.json | |
+| Accessibility conformance | ☐ | A11y_Test_Plan.md | |
+| Analytics tags verified | ☐ | Analytics_Spec.xlsx | |
+| Internationalisation/localisation | ☐ | | |
+
+## Notes
+- If product is private/internal, record N/A justification.
+
+## Approval
+- Marketing:
+- SEO specialist:
+- Date:
diff --git a/workflow1/codex-phase6-operations/protocol.md b/workflow1/codex-phase6-operations/protocol.md
new file mode 100644
index 0000000000000000000000000000000000000000..5b0fdf239bdaca39b91b87700c3edfb3d77ab139
--- /dev/null
+++ b/workflow1/codex-phase6-operations/protocol.md
@@ -0,0 +1,51 @@
+# Codex Phase 6 — Operations Protocol
+
+Extends `workflow1` Protocol 5 to meet AGENTS Phase 6 operational requirements for post-launch excellence.
+
+## Objectives
+- Maintain SLO compliance and rapid incident response.
+- Track dependency and security updates.
+- Conduct retrospectives and postmortems with action tracking.
+
+## Inputs
+- Phase 5 launch artefacts (runbooks, DR plans, observability dashboards).
+- On-call rotation schedule.
+- Incident management tooling.
+
+## Required Artefacts
+- `templates/Postmortem_Template.md`
+- `templates/Dependency_Update_Log.md`
+- `templates/Security_Update_Log.md`
+- `templates/Retro_Template.md`
+
+## Automation Scripts
+- `scripts/monitor_slo.py`
+  - Reads observability outputs or mock metrics to log SLO status.
+- `scripts/schedule_retros.py`
+  - Generates retrospective calendar entries and updates evidence logs.
+
+## Procedure
+1. Run `monitor_slo.py --project <slug>` weekly to capture SLO adherence.
+2. Update dependency and security logs after each maintenance window.
+3. Use `schedule_retros.py --project <slug>` to create retro/postmortem placeholders.
+4. Conduct retrospectives, populate action items, and track closure.
+5. Record postmortems for incidents including root cause, remediation, and follow-up tasks.
+6. Ensure vulnerability SLA compliance (no high/critical >14 days outstanding).
+
+## Exit Criteria (Steady State)
+- SLO metrics documented for 2–4 consecutive weeks with PASS results.
+- Dependency and security logs updated within defined cadence.
+- Retro actions closed on time; follow-up tasks linked to backlog.
+- Postmortems completed for all incidents above severity threshold.
+
+## Dependencies
+- Access to observability metrics or exports.
+- Issue tracker integration for follow-up tasks.
+- Calendar system for scheduling retros.
+
+## Evidence Logging
+Scripts append to `../evidence/phase6/run.log`, update `manifest.json`, and maintain `validation.md` records. Manual updates must follow the same evidence structure.
+
+## Related Protocols
+- Phase 5 launch for runbooks.
+- Earlier phases for backlog/task traceability.
diff --git a/workflow1/codex-phase6-operations/scripts/monitor_slo.py b/workflow1/codex-phase6-operations/scripts/monitor_slo.py
new file mode 100644
index 0000000000000000000000000000000000000000..62a17a7fef33def17fc4efd12edb42a50fd3b410
--- /dev/null
+++ b/workflow1/codex-phase6-operations/scripts/monitor_slo.py
@@ -0,0 +1,114 @@
+#!/usr/bin/env python3
+"""Record SLO status for Phase 6 operations."""
+from __future__ import annotations
+
+import argparse
+import hashlib
+import json
+from datetime import datetime
+from pathlib import Path
+from typing import Dict, List
+
+ROOT = Path(__file__).resolve().parents[2]
+PHASE = "phase6"
+
+
+def sha256sum(path: Path) -> str:
+    h = hashlib.sha256()
+    with path.open("rb") as f:
+        for chunk in iter(lambda: f.read(8192), b""):
+            h.update(chunk)
+    return h.hexdigest()
+
+
+def load_manifest(manifest_path: Path) -> List[Dict[str, str]]:
+    if manifest_path.exists():
+        return json.loads(manifest_path.read_text())
+    return []
+
+
+def write_manifest(manifest_path: Path, entries: List[Dict[str, str]]) -> None:
+    manifest_path.write_text(json.dumps(entries, indent=2, sort_keys=True))
+
+
+def append_run_log(message: str) -> None:
+    log_path = ROOT / "evidence" / PHASE / "run.log"
+    log_path.parent.mkdir(parents=True, exist_ok=True)
+    timestamp = datetime.utcnow().isoformat() + "Z"
+    with log_path.open("a", encoding="utf-8") as handle:
+        handle.write(f"[{timestamp}] {message}\n")
+
+
+def update_validation(project: str, status: str, notes: str) -> None:
+    validation = ROOT / "evidence" / PHASE / "validation.md"
+    if not validation.exists():
+        validation.write_text("# Phase 6 Validation Results\n\n| Timestamp | Project | Status | Notes |\n| --- | --- | --- | --- |\n")
+    timestamp = datetime.utcnow().isoformat() + "Z"
+    with validation.open("a", encoding="utf-8") as handle:
+        handle.write(f"| {timestamp} | {project} | {status} | {notes} |\n")
+
+
+def update_manifest_entries(project: str, files: List[Path]) -> None:
+    manifest_path = ROOT / "evidence" / PHASE / "manifest.json"
+    entries = load_manifest(manifest_path)
+    for path in files:
+        rel = path.relative_to(ROOT)
+        checksum = sha256sum(path)
+        entry = {
+            "phase": PHASE,
+            "project": project,
+            "file": str(rel),
+            "checksum": checksum,
+        }
+        entries = [e for e in entries if not (e.get("file") == entry["file"] and e.get("project") == project)]
+        entries.append(entry)
+    write_manifest(manifest_path, entries)
+
+
+def main() -> None:
+    parser = argparse.ArgumentParser(description=__doc__)
+    parser.add_argument("--project", required=True)
+    parser.add_argument("--availability", type=float, default=99.9)
+    parser.add_argument("--latency", type=float, default=280.0, help="p95 latency in ms")
+    parser.add_argument("--error-rate", type=float, default=0.8)
+    args = parser.parse_args()
+
+    project = args.project.strip()
+    if not project:
+        raise SystemExit("Project slug cannot be empty")
+
+    payload = {
+        "project": project,
+        "timestamp": datetime.utcnow().isoformat() + "Z",
+        "metrics": {
+            "availability_percent": args.availability,
+            "p95_latency_ms": args.latency,
+            "error_rate_percent": args.error_rate,
+        },
+        "status": "PASS" if (args.availability >= 99.5 and args.latency <= 300 and args.error_rate <= 1.0) else "FAIL",
+    }
+
+    output_dir = ROOT / "evidence" / PHASE / "outputs" / project / "operations"
+    output_dir.mkdir(parents=True, exist_ok=True)
+    output_file = output_dir / "slo_status.json"
+    existing: List[Dict[str, object]] = []
+    if output_file.exists():
+        try:
+            existing = json.loads(output_file.read_text())
+        except json.JSONDecodeError:
+            existing = []
+    existing.append(payload)
+    output_file.write_text(json.dumps(existing, indent=2, sort_keys=True))
+
+    update_manifest_entries(project, [output_file])
+    append_run_log(f"monitor_slo: recorded status {payload['status']} for project '{project}'")
+    update_validation(project, payload["status"], f"availability={args.availability}, latency={args.latency}, error_rate={args.error_rate}")
+
+    print(f"SLO status recorded: {payload['status']} -> {output_file}")
+
+    if payload["status"] != "PASS":
+        raise SystemExit(1)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/workflow1/codex-phase6-operations/scripts/schedule_retros.py b/workflow1/codex-phase6-operations/scripts/schedule_retros.py
new file mode 100644
index 0000000000000000000000000000000000000000..ca81744653a4e502da24c2d6fc8c8e97d1aee464
--- /dev/null
+++ b/workflow1/codex-phase6-operations/scripts/schedule_retros.py
@@ -0,0 +1,106 @@
+#!/usr/bin/env python3
+"""Schedule retrospectives and update evidence for Phase 6."""
+from __future__ import annotations
+
+import argparse
+import hashlib
+import json
+from datetime import datetime, timedelta
+from pathlib import Path
+from typing import Dict, List
+
+ROOT = Path(__file__).resolve().parents[2]
+PHASE = "phase6"
+
+
+def sha256sum(path: Path) -> str:
+    h = hashlib.sha256()
+    with path.open("rb") as f:
+        for chunk in iter(lambda: f.read(8192), b""):
+            h.update(chunk)
+    return h.hexdigest()
+
+
+def load_manifest(manifest_path: Path) -> List[Dict[str, str]]:
+    if manifest_path.exists():
+        return json.loads(manifest_path.read_text())
+    return []
+
+
+def write_manifest(manifest_path: Path, entries: List[Dict[str, str]]) -> None:
+    manifest_path.write_text(json.dumps(entries, indent=2, sort_keys=True))
+
+
+def append_run_log(message: str) -> None:
+    log_path = ROOT / "evidence" / PHASE / "run.log"
+    log_path.parent.mkdir(parents=True, exist_ok=True)
+    timestamp = datetime.utcnow().isoformat() + "Z"
+    with log_path.open("a", encoding="utf-8") as handle:
+        handle.write(f"[{timestamp}] {message}\n")
+
+
+def update_validation(project: str, count: int) -> None:
+    validation = ROOT / "evidence" / PHASE / "validation.md"
+    if not validation.exists():
+        validation.write_text("# Phase 6 Validation Results\n\n| Timestamp | Project | Status | Notes |\n| --- | --- | --- | --- |\n")
+    timestamp = datetime.utcnow().isoformat() + "Z"
+    with validation.open("a", encoding="utf-8") as handle:
+        handle.write(f"| {timestamp} | {project} | PASS | Scheduled {count} retros |\n")
+
+
+def update_manifest_entries(project: str, files: List[Path]) -> None:
+    manifest_path = ROOT / "evidence" / PHASE / "manifest.json"
+    entries = load_manifest(manifest_path)
+    for path in files:
+        rel = path.relative_to(ROOT)
+        checksum = sha256sum(path)
+        entry = {
+            "phase": PHASE,
+            "project": project,
+            "file": str(rel),
+            "checksum": checksum,
+        }
+        entries = [e for e in entries if not (e.get("file") == entry["file"] and e.get("project") == project)]
+        entries.append(entry)
+    write_manifest(manifest_path, entries)
+
+
+def main() -> None:
+    parser = argparse.ArgumentParser(description=__doc__)
+    parser.add_argument("--project", required=True)
+    parser.add_argument("--start", help="Start date ISO format", default=datetime.utcnow().date().isoformat())
+    parser.add_argument("--cadence", type=int, default=14, help="Cadence in days")
+    parser.add_argument("--count", type=int, default=4, help="Number of retros to schedule")
+    args = parser.parse_args()
+
+    project = args.project.strip()
+    if not project:
+        raise SystemExit("Project slug cannot be empty")
+
+    start_date = datetime.fromisoformat(args.start)
+    cadence = timedelta(days=args.cadence)
+    entries = []
+    for index in range(args.count):
+        when = start_date + cadence * index
+        entries.append({
+            "project": project,
+            "retro_number": index + 1,
+            "scheduled_for": when.isoformat(),
+            "facilitator": "TBD",
+            "status": "Scheduled",
+        })
+
+    output_dir = ROOT / "evidence" / PHASE / "outputs" / project / "operations"
+    output_dir.mkdir(parents=True, exist_ok=True)
+    output_file = output_dir / "retro_schedule.json"
+    output_file.write_text(json.dumps(entries, indent=2, sort_keys=True))
+
+    update_manifest_entries(project, [output_file])
+    append_run_log(f"schedule_retros: scheduled {len(entries)} retros for project '{project}'")
+    update_validation(project, len(entries))
+
+    print(f"Retro schedule generated -> {output_file}")
+
+
+if __name__ == "__main__":
+    main()
diff --git a/workflow1/codex-phase6-operations/templates/Dependency_Update_Log.md b/workflow1/codex-phase6-operations/templates/Dependency_Update_Log.md
new file mode 100644
index 0000000000000000000000000000000000000000..61e46a4c633ef5eb395dae1769ccbd250559327e
--- /dev/null
+++ b/workflow1/codex-phase6-operations/templates/Dependency_Update_Log.md
@@ -0,0 +1,13 @@
+# Dependency Update Log
+
+| Date | Component | Version From | Version To | Risk Assessment | Tests | Owner | Notes |
+| --- | --- | --- | --- | --- | --- | --- | --- |
+| | | | | | | | |
+
+## Cadence
+- Weekly review of automated dependency PRs.
+- Monthly consolidated report for stakeholders.
+
+## Approvals
+- Engineering lead:
+- Security:
diff --git a/workflow1/codex-phase6-operations/templates/Postmortem_Template.md b/workflow1/codex-phase6-operations/templates/Postmortem_Template.md
new file mode 100644
index 0000000000000000000000000000000000000000..1230c8f8b3c2ce1d4e33b84ad5792b690627ddda
--- /dev/null
+++ b/workflow1/codex-phase6-operations/templates/Postmortem_Template.md
@@ -0,0 +1,40 @@
+# Postmortem Report
+
+## Incident Summary
+- Incident ID:
+- Date / Time:
+- Severity:
+- Duration:
+
+## Impact
+- Affected systems/users:
+- Business impact:
+
+## Timeline
+| Time | Event | Source |
+| --- | --- | --- |
+| | | |
+
+## Root Cause Analysis
+- Immediate cause:
+- Contributing factors:
+- Detection gaps:
+
+## Remediation
+| Task | Owner | Due Date | Status |
+| --- | --- | --- | --- |
+| | | | |
+
+## Lessons Learned
+- What worked:
+- What didn’t:
+- Prevention strategies:
+
+## Follow-Up Actions
+- Link to backlog tickets.
+- Track closure in `Retro_Template.md`.
+
+## Approvals
+- Incident commander:
+- SRE lead:
+- Product:
diff --git a/workflow1/codex-phase6-operations/templates/Retro_Template.md b/workflow1/codex-phase6-operations/templates/Retro_Template.md
new file mode 100644
index 0000000000000000000000000000000000000000..259c10f12ae9d7757c1316d9e2c7a35845a5f8ad
--- /dev/null
+++ b/workflow1/codex-phase6-operations/templates/Retro_Template.md
@@ -0,0 +1,35 @@
+# Retrospective Template
+
+## Session Details
+- Date:
+- Sprint / Period:
+- Facilitator:
+- Participants:
+
+## Agenda
+1. Set the stage
+2. Review goals & metrics
+3. What went well
+4. What can be improved
+5. Action items
+
+## Metrics Snapshot
+- SLO status: []
+- Deployment frequency: []
+- Lead time for changes: []
+
+## Action Items
+| Action | Owner | Due Date | Status | Follow-Up |
+| --- | --- | --- | --- | --- |
+| | | | | |
+
+## Decisions
+- Decision / outcome / reference to ADR if needed.
+
+## Next Steps
+- Link actions to backlog.
+- Schedule next retro via `schedule_retros.py` output.
+
+## Sign-off
+- Facilitator:
+- Engineering lead:
diff --git a/workflow1/codex-phase6-operations/templates/Security_Update_Log.md b/workflow1/codex-phase6-operations/templates/Security_Update_Log.md
new file mode 100644
index 0000000000000000000000000000000000000000..6d9f441c8525ac118a1eba1ae8eb41a9f740f0e5
--- /dev/null
+++ b/workflow1/codex-phase6-operations/templates/Security_Update_Log.md
@@ -0,0 +1,13 @@
+# Security Update Log
+
+| Date | Advisory/CVE | Affected Component | Severity | Action Taken | SLA Due | Status | Notes |
+| --- | --- | --- | --- | --- | --- | --- | --- |
+| | | | | | | | |
+
+## Process
+- Weekly security review meeting.
+- High/Critical vulnerabilities resolved within 14 days.
+
+## Approvals
+- Security lead:
+- Engineering lead:
diff --git a/workflow1/evidence/phase2/manifest.json b/workflow1/evidence/phase2/manifest.json
new file mode 100644
index 0000000000000000000000000000000000000000..24b8c7bd96a38168973fc6a2a84cdf26647eef4b
--- /dev/null
+++ b/workflow1/evidence/phase2/manifest.json
@@ -0,0 +1,68 @@
+[
+  {
+    "checksum": "c534463ddd570ec6ce252fb9ff4e6255c65a2dea9ba14b2f3b77b57868420598",
+    "file": "evidence/phase2/outputs/demo/architecture/Architecture.md",
+    "phase": "phase2",
+    "project": "demo"
+  },
+  {
+    "checksum": "1c9402a5dec1058e2fc23514cfee26211b36394e75364f85ac5e8227c782f73f",
+    "file": "evidence/phase2/outputs/demo/architecture/C4/context.mmd",
+    "phase": "phase2",
+    "project": "demo"
+  },
+  {
+    "checksum": "6bc46d7a10786780610873e20451b6b09540a4025e9b75a1fb485dd819dcd97c",
+    "file": "evidence/phase2/outputs/demo/architecture/C4/container.mmd",
+    "phase": "phase2",
+    "project": "demo"
+  },
+  {
+    "checksum": "c732570181780d8a004a760fa187171b9c91a22bb084cce40307665b5efb3954",
+    "file": "evidence/phase2/outputs/demo/architecture/ADR-template.md",
+    "phase": "phase2",
+    "project": "demo"
+  },
+  {
+    "checksum": "30d0a9f980a4bc5bc4e130698e1a099161e410748e21221b0c56fc3343688cc0",
+    "file": "evidence/phase2/outputs/demo/architecture/Env_Strategy.md",
+    "phase": "phase2",
+    "project": "demo"
+  },
+  {
+    "checksum": "2e4eea80f4924fb34d32bff1c63d6194dde528494652bc3c88d6cadf9d3db6fb",
+    "file": "evidence/phase2/outputs/demo/architecture/Repo_Policy.md",
+    "phase": "phase2",
+    "project": "demo"
+  },
+  {
+    "checksum": "04cfb2e5bd6e9704393d7f3cffda32af0ce7103571eab0643055f2fa249a404b",
+    "file": "evidence/phase2/outputs/demo/architecture/Coding_Standards.md",
+    "phase": "phase2",
+    "project": "demo"
+  },
+  {
+    "checksum": "c8e9d6b1d6ca1f50415943256ae7ad894cdfa7546f33201d3fe1300384b7fa1f",
+    "file": "evidence/phase2/outputs/demo/contracts/Product_Backlog.csv",
+    "phase": "phase2",
+    "project": "demo"
+  },
+  {
+    "checksum": "e4be7034c00102147bc19c46cdcc65ba3b22fb81c7430b22020f10c4254f20e5",
+    "file": "evidence/phase2/outputs/demo/contracts/Sprint0_Plan.md",
+    "phase": "phase2",
+    "project": "demo"
+  },
+  {
+    "checksum": "0bfe05f455515e6d3021a93d16482ac276e4a68efde2565302802b7df899295c",
+    "file": "evidence/phase2/outputs/demo/contracts/OpenAPI_README.md",
+    "phase": "phase2",
+    "project": "demo"
+  },
+  {
+    "checksum": "d2104d005fef4989fc3d339e60760838cb6640ebfd6b2f1c0e406e7ec6ab2be0",
+    "file": "evidence/phase2/outputs/demo/contracts/openapi/api.yaml",
+    "phase": "phase2",
+    "project": "demo"
+  }
+]
\ No newline at end of file
diff --git a/workflow1/evidence/phase2/outputs/demo/architecture/ADR-template.md b/workflow1/evidence/phase2/outputs/demo/architecture/ADR-template.md
new file mode 100644
index 0000000000000000000000000000000000000000..417ea18ed4008eb8d89ea8ee75bbcd392f7b1975
--- /dev/null
+++ b/workflow1/evidence/phase2/outputs/demo/architecture/ADR-template.md
@@ -0,0 +1,35 @@
+# Architecture Decision Record
+
+- **Decision ID:** ADR-000
+- **Status:** Pending | Approved | Superseded | Rejected
+- **Date:**
+- **Decision Owners:**
+
+## Context
+Summarise the drivers (requirements, constraints, risks) triggering this decision. Reference AGENTS Phase 2 objectives and related protocols.
+
+## Decision
+State the selected option. Include architectural principles satisfied, trade-offs, and links to impacted components.
+
+## Options Considered
+| Option | Pros | Cons | Evidence |
+| --- | --- | --- | --- |
+| | | | |
+
+## Implications
+- Short-term consequences
+- Long-term/operational impacts
+- Required follow-up actions (tickets, owners, due dates)
+
+## Validation & Evidence
+- Prototype / spike results
+- Links to OpenAPI or architecture diagrams
+- Quality gate outcomes (lint/tests)
+
+## Revisions
+- Date / change summary / author
+
+## Approval
+- Architecture lead:
+- Engineering lead:
+- Product/Compliance sign-off:
diff --git a/workflow1/evidence/phase2/outputs/demo/architecture/Architecture.md b/workflow1/evidence/phase2/outputs/demo/architecture/Architecture.md
new file mode 100644
index 0000000000000000000000000000000000000000..442ed64591b82d25f0e146827b9810290cb04190
--- /dev/null
+++ b/workflow1/evidence/phase2/outputs/demo/architecture/Architecture.md
@@ -0,0 +1,50 @@
+# Architecture Overview
+
+## Purpose
+Document the target system architecture for Phase 2 design sign-off. Aligns with AGENTS Phase 2 requirements and Protocol 2 expectations from `workflow1`.
+
+## Context Summary
+- **Product/Service Name:**
+- **Problem Statement:**
+- **Key Personas & Journeys:**
+- **Regulatory/Compliance Constraints:**
+
+## Architectural Principles
+1. Principle name — rationale, measurable guardrail, AGENTS link.
+2. ...
+
+## System Landscape
+- Reference `C4/context.mmd` for system relationships.
+- Include upstream/downstream dependencies.
+- Capture integration contracts (OpenAPI, events, ERD).
+
+## Capability Breakdown
+| Capability | Owner | Supporting Services | Notes |
+| --- | --- | --- | --- |
+| | | | |
+
+## Data Strategy
+- Authoritative data stores and retention strategy.
+- Privacy & residency considerations.
+- Migration plan references.
+
+## Security & Compliance
+- Threat model summary (link to Security_Checklist.md once available).
+- Authentication/authorisation decisions.
+- Data protection controls.
+
+## Operational Quality
+- Performance expectations (latency, throughput, budgets).
+- Observability hooks (logs, metrics, traces).
+- SLO guardrails (link to Phase 4 templates).
+
+## Decision Log
+Reference ADR catalogue; list key decisions and status.
+
+## Open Questions / Risks
+- Risk description, mitigation owner, due date.
+
+## Approval
+- Architecture lead sign-off:
+- Product sign-off:
+- Date:
diff --git a/workflow1/evidence/phase2/outputs/demo/architecture/C4/container.mmd b/workflow1/evidence/phase2/outputs/demo/architecture/C4/container.mmd
new file mode 100644
index 0000000000000000000000000000000000000000..99438bb2981a9f813ed79fb4f2485ab77df1a4de
--- /dev/null
+++ b/workflow1/evidence/phase2/outputs/demo/architecture/C4/container.mmd
@@ -0,0 +1,20 @@
+%% C4 Container Diagram (Mermaid)
+C4Container
+    title Container View
+    Person(customer, "Customer")
+    Container_Boundary(system, "Target Platform") {
+        Container(web_app, "Web App", "React/Next.js", "UI and client orchestration")
+        Container(api, "API Gateway", "FastAPI", "Contract-first services")
+        Container(db, "Primary Database", "PostgreSQL", "Transactional store")
+        Container(job, "Async Workers", "Celery", "Background processing")
+    }
+    Container_Ext(third_party, "3rd Party Service", "REST", "External capability")
+    Container_Ext(monitoring, "Monitoring Stack", "Grafana/Prometheus", "Observability")
+
+    Rel(customer, web_app, "Uses", "HTTPS")
+    Rel(web_app, api, "Calls", "REST / GraphQL")
+    Rel(api, db, "Reads/Writes", "SQL")
+    Rel(api, job, "Queues work", "AMQP")
+    Rel(job, db, "Stores results", "SQL")
+    Rel(api, third_party, "Integrates", "OpenAPI contract")
+    Rel(api, monitoring, "Emits metrics", "OTel")
diff --git a/workflow1/evidence/phase2/outputs/demo/architecture/C4/context.mmd b/workflow1/evidence/phase2/outputs/demo/architecture/C4/context.mmd
new file mode 100644
index 0000000000000000000000000000000000000000..9b02314778d590776cdf941738eba8a7c081ef52
--- /dev/null
+++ b/workflow1/evidence/phase2/outputs/demo/architecture/C4/context.mmd
@@ -0,0 +1,13 @@
+%% C4 Context Diagram (Mermaid) — aligns with AGENTS Phase 2 architecture requirements
+C4Context
+    title System Context
+    Person(customer, "Customer", "Primary persona interacting with the product")
+    System_Boundary(system, "Target Platform") {
+        Container(app, "Application", "Tech Stack TBD", "Delivers the core user workflow")
+    }
+    System_Ext(api_partner, "Partner API", "External", "Data provider / integration")
+    System_Ext(obs, "Observability Stack", "Logging/metrics destination")
+
+    Rel(customer, app, "Uses", "Web / Mobile")
+    Rel(app, api_partner, "Consumes", "OpenAPI contract: /openapi/<service>.yaml")
+    Rel(app, obs, "Emits telemetry", "OTel traces + metrics")
diff --git a/workflow1/evidence/phase2/outputs/demo/architecture/Coding_Standards.md b/workflow1/evidence/phase2/outputs/demo/architecture/Coding_Standards.md
new file mode 100644
index 0000000000000000000000000000000000000000..7f6b8df9ea1a9c0c24d7a2550f3154b5a970df50
--- /dev/null
+++ b/workflow1/evidence/phase2/outputs/demo/architecture/Coding_Standards.md
@@ -0,0 +1,41 @@
+# Coding Standards
+
+## Purpose
+Provide language/framework conventions used to enforce consistency and CI linting baselines.
+
+## General Guidelines
+- Follow SOLID and clean code practices.
+- Prefer automated formatting tools (Prettier, Black, gofmt, etc.).
+- Document all public interfaces with docstrings/comments.
+
+## Language-Specific Rules
+### Python
+- Use type hints and run `mypy` during CI.
+- Use `black` + `isort` for formatting/import order.
+- Avoid side effects on import.
+
+### JavaScript/TypeScript
+- Enforce ESLint with recommended + security plugins.
+- Enable strict TypeScript config for new packages.
+- Limit module complexity (cyclomatic complexity < 10).
+
+### Infrastructure as Code
+- Terraform: run `terraform fmt` and `terraform validate` pre-commit.
+- YAML (CI/CD): verify with `yamllint` and schema validation.
+
+## Testing Standards
+- Minimum unit test coverage: 80% (adjust with risk justification).
+- Snapshot/UI tests for components.
+- Integration tests for service contracts.
+
+## Security Requirements
+- Apply secure defaults (OWASP ASVS alignment).
+- Validate inputs, sanitise outputs.
+- Document threat mitigations in `Security_Checklist.md` (Phase 3).
+
+## Documentation
+- Update README/CHANGELOG with user-facing changes.
+- Link to ADRs for major decisions.
+
+## Review Checklist
+- See `Code_Review_Checklist.md` for enforcement items.
diff --git a/workflow1/evidence/phase2/outputs/demo/architecture/Env_Strategy.md b/workflow1/evidence/phase2/outputs/demo/architecture/Env_Strategy.md
new file mode 100644
index 0000000000000000000000000000000000000000..3e723746d9ac2f82f199687f518a382bb9db4b52
--- /dev/null
+++ b/workflow1/evidence/phase2/outputs/demo/architecture/Env_Strategy.md
@@ -0,0 +1,39 @@
+# Environment Strategy
+
+## Purpose
+Outline the provisioning, isolation, and secrets approach for all environments in alignment with AGENTS Phase 2.
+
+## Environments
+| Environment | Purpose | Hosting | Branch Trigger | Data Policy | Notes |
+| --- | --- | --- | --- | --- | --- |
+| Local | Developer workstation | Docker Compose | feature/* | Synthetic | |
+| Dev | Shared integration | Kubernetes | develop | Scrubbed | |
+| Staging | Pre-prod validation | Kubernetes | release/* | Sanitised | |
+| Production | Customer traffic | Kubernetes | main | Live | |
+
+## Access & Secrets
+- Secrets managed via vault (manual rotation, never stored in repo).
+- Access control roles with least privilege.
+
+## Deployment Strategy
+- Continuous deployment to dev.
+- Staging promoted through release branches with smoke automation.
+- Production uses canary + feature flags.
+
+## Tooling & Automation
+- Reference `docs/LOCAL_DEV_WORKFLOW.md` for bootstrap commands.
+- CI pipelines enforce lint/test/build prior to deployment.
+- Infrastructure templates stored in `/deploy/` (see repo policy).
+
+## Compliance & Audit
+- Logging requirements per policy.
+- Change management approvals.
+
+## Risks & Mitigation
+- Secret leakage → adopt secret scanning & vault integration.
+- Drift → scheduled infra validation.
+
+## Sign-off
+- DevOps/Platform lead:
+- Security lead:
+- Date:
diff --git a/workflow1/evidence/phase2/outputs/demo/architecture/Repo_Policy.md b/workflow1/evidence/phase2/outputs/demo/architecture/Repo_Policy.md
new file mode 100644
index 0000000000000000000000000000000000000000..7e41691fd7988f4297c8b96c1a803e6c17ebc8bc
--- /dev/null
+++ b/workflow1/evidence/phase2/outputs/demo/architecture/Repo_Policy.md
@@ -0,0 +1,36 @@
+# Repository & Branch Policy
+
+## Purpose
+Define branching, review, and merge standards that satisfy AGENTS Phase 2 exit checks.
+
+## Branching Model
+- `main`: protected, deployable. Requires PR review + green CI.
+- `develop`: integration branch for staging.
+- `release/*`: temporary release branches for staging → production promotion.
+- `feature/*`: developer branches; delete after merge.
+
+## Commit Standards
+- Conventional Commits enforced via lint (`npm run lint:commits`).
+- Max PR size (lines/files) before additional approval.
+- Reference related ADR/backlog ID in commit body.
+
+## Pull Request Requirements
+- Minimum 2 approvals (Engineering + QA/PM).
+- All CI checks (lint, tests, security, perf, a11y) must pass.
+- Link to testing evidence and feature flags toggled.
+
+## Automation Hooks
+- GitHub Actions / GitLab CI pipeline definitions stored in `.github/workflows/`.
+- Requires `quality_gate_simple.sh` or equivalent to be invoked pre-merge.
+
+## Compliance Controls
+- Secret scanning and dependency scanning enabled.
+- Branch protection preventing force pushes.
+- Require signed commits if regulated environment.
+
+## Documentation
+- Link to `Code_Review_Checklist.md` (Phase 3) for reviewer prompts.
+
+## Sign-off
+- Repository maintainer:
+- Date:
diff --git a/workflow1/evidence/phase2/outputs/demo/contracts/OpenAPI_README.md b/workflow1/evidence/phase2/outputs/demo/contracts/OpenAPI_README.md
new file mode 100644
index 0000000000000000000000000000000000000000..1358cdb2c4aacca0bd99755a8f47c0b8e1ac4b1e
--- /dev/null
+++ b/workflow1/evidence/phase2/outputs/demo/contracts/OpenAPI_README.md
@@ -0,0 +1,27 @@
+# OpenAPI Contract Guidance
+
+## Purpose
+Ensure services ship with validated OpenAPI specifications and mock servers as required by AGENTS Phase 2 exit criteria.
+
+## Workflow
+1. Define endpoints using contract-first approach.
+2. Author YAML in `openapi/<service>.yaml` using Redocly or Stoplight style guides.
+3. Validate locally: `npx @redocly/cli lint openapi/<service>.yaml`.
+4. Generate mocks: `npx @redocly/cli mock openapi/<service>.yaml --watch`.
+5. Commit contract updates with corresponding ADR references.
+
+## Template Sections
+- Info (title, version, contact)
+- Servers (local, staging, production)
+- Tags per capability
+- Paths with request/response schemas
+- Components (schemas, security, parameters)
+
+## Integration Hooks
+- CI step runs Redocly lint + spectral rules.
+- Mock server used by integration tests.
+- Contract diffs trigger QA review.
+
+## Evidence
+- Attach lint output to `evidence/phase2/validation.md`.
+- Record mock server run info in `evidence/phase2/run.log`.
diff --git a/workflow1/evidence/phase2/outputs/demo/contracts/Product_Backlog.csv b/workflow1/evidence/phase2/outputs/demo/contracts/Product_Backlog.csv
new file mode 100644
index 0000000000000000000000000000000000000000..689ff579774788e6fccc4f183ee7dc668663914a
--- /dev/null
+++ b/workflow1/evidence/phase2/outputs/demo/contracts/Product_Backlog.csv
@@ -0,0 +1,4 @@
+"ID","Title","Epic","Priority","Sprint","Acceptance Criteria","Estimate (pts)","Owner","Dependencies","Notes"
+"PB-001","","","Must","Sprint 0","- Given ...\n- When ...\n- Then ...","","","",""
+"PB-002","","","Should","Sprint 1","","","","",""
+"PB-003","","","Could","Sprint 2","","","","",""
diff --git a/workflow1/evidence/phase2/outputs/demo/contracts/Sprint0_Plan.md b/workflow1/evidence/phase2/outputs/demo/contracts/Sprint0_Plan.md
new file mode 100644
index 0000000000000000000000000000000000000000..9fda938201ad311c85d31538962d67745d48062f
--- /dev/null
+++ b/workflow1/evidence/phase2/outputs/demo/contracts/Sprint0_Plan.md
@@ -0,0 +1,30 @@
+# Sprint 0 Readiness Plan
+
+## Goals
+- Establish environments, tooling, and baselines to start feature development.
+
+## Scope
+| Workstream | Tasks | Owner | Due | Status |
+| --- | --- | --- | --- | --- |
+| Architecture | Finalise ADRs, architecture diagrams | | | |
+| Contracts | Validate OpenAPI, mock server | | | |
+| Tooling | Configure CI skeleton (lint/test/build) | | | |
+| Backlog | Groom Sprint 1–2 stories with AC | | | |
+
+## Deliverables
+- Architecture pack approved
+- Repository policy enforced (branch protections, PR templates)
+- Environments provisioned with documented strategy
+
+## Risks & Mitigations
+| Risk | Impact | Mitigation | Owner | Status |
+| --- | --- | --- | --- | --- |
+| | | | | |
+
+## Dependencies
+- Upstream design decisions (list ADR IDs)
+- Security/compliance reviews scheduled
+
+## Exit Criteria
+- All tasks marked complete with evidence in `evidence/phase2`
+- Sign-off by Product + Engineering + QA leads
diff --git a/workflow1/evidence/phase2/outputs/demo/contracts/openapi/api.yaml b/workflow1/evidence/phase2/outputs/demo/contracts/openapi/api.yaml
new file mode 100644
index 0000000000000000000000000000000000000000..1dfd3cb61c23f25f55a0537cf0bf41d0222ec0a1
--- /dev/null
+++ b/workflow1/evidence/phase2/outputs/demo/contracts/openapi/api.yaml
@@ -0,0 +1,23 @@
+openapi: 3.1.0
+info:
+  title: Api API
+  version: 0.1.0
+  description: Contract-first stub generated during Phase 2.
+servers:
+  - url: http://localhost:8000
+    description: Local mock server
+paths:
+  /health:
+    get:
+      summary: Health probe
+      responses:
+        '200':
+          description: OK
+          content:
+            application/json:
+              schema:
+                type: object
+                properties:
+                  status:
+                    type: string
+                    example: ok
diff --git a/workflow1/evidence/phase2/validation.md b/workflow1/evidence/phase2/validation.md
new file mode 100644
index 0000000000000000000000000000000000000000..dfff005e88c3bb4b58d8ac49f5dd1790b164bca9
--- /dev/null
+++ b/workflow1/evidence/phase2/validation.md
@@ -0,0 +1,4 @@
+# Phase 2 Validation Results
+
+| Timestamp | Project | Status | Notes |
+| --- | --- | --- | --- |
diff --git a/workflow1/evidence/phase3/manifest.json b/workflow1/evidence/phase3/manifest.json
new file mode 100644
index 0000000000000000000000000000000000000000..c0b9be563851835efac2f0f0a5d475bda21c2ecf
--- /dev/null
+++ b/workflow1/evidence/phase3/manifest.json
@@ -0,0 +1,57 @@
+[
+  {
+    "checksum": "d93edb57cd16d07f67b51318e3f384e31172a4f5e323d70ffd7e82eee1c7d078",
+    "file": "evidence/phase3/outputs/demo/quality-rails/Security_Checklist.md",
+    "phase": "phase3",
+    "project": "demo",
+    "recorded_at": "2025-09-30T09:03:00.694755Z"
+  },
+  {
+    "checksum": "d89e684f939d0244a5483dce05c59a7c5ed5e928120e0f7d6d0d85817e85b212",
+    "file": "evidence/phase3/outputs/demo/quality-rails/Analytics_Spec.xlsx",
+    "phase": "phase3",
+    "project": "demo",
+    "recorded_at": "2025-09-30T09:03:00.694855Z"
+  },
+  {
+    "checksum": "1b3ebca83d4843d535778d355a4a435229c14f1c1f3675b9d95d2a082080c549",
+    "file": "evidence/phase3/outputs/demo/quality-rails/A11y_Test_Plan.md",
+    "phase": "phase3",
+    "project": "demo",
+    "recorded_at": "2025-09-30T09:03:00.694894Z"
+  },
+  {
+    "checksum": "e42d52637ef9076ffae6178681749b40682b7756ea9f0ea988c5657fc2fc0b64",
+    "file": "evidence/phase3/outputs/demo/quality-rails/Feature_Flags.md",
+    "phase": "phase3",
+    "project": "demo",
+    "recorded_at": "2025-09-30T09:03:00.694933Z"
+  },
+  {
+    "checksum": "04004f00be6d0b3020988959c19eee2f36cb48599fcfcaabf5afcae9e07a9fb6",
+    "file": "evidence/phase3/outputs/demo/quality-rails/Code_Review_Checklist.md",
+    "phase": "phase3",
+    "project": "demo",
+    "recorded_at": "2025-09-30T09:03:00.694972Z"
+  },
+  {
+    "checksum": "49f69d1153b1fe8e5b4f5c6d298d4c4dc52ec34a9eaceeb9906506d96daa2136",
+    "file": "evidence/phase3/outputs/demo/quality-rails/Test_Plan.md",
+    "phase": "phase3",
+    "project": "demo",
+    "recorded_at": "2025-09-30T09:03:00.695013Z"
+  },
+  {
+    "checksum": "5d8f40249911bfd8d64aac864dcc922c49a32c90c0d9dd74168e80a43b70e9cc",
+    "file": "evidence/phase3/outputs/demo/quality-rails/perf/budgets.json",
+    "phase": "phase3",
+    "project": "demo",
+    "recorded_at": "2025-09-30T09:03:00.695080Z"
+  },
+  {
+    "checksum": "30c75e87e731e7c5d774a898e73525951bb0bc7c948a5a09bd2d7ac3ac39b76a",
+    "file": "evidence/phase3/outputs/demo/quality-rails/feature_flags.json",
+    "phase": "phase3",
+    "project": "demo"
+  }
+]
\ No newline at end of file
diff --git a/workflow1/evidence/phase3/outputs/demo/quality-rails/A11y_Test_Plan.md b/workflow1/evidence/phase3/outputs/demo/quality-rails/A11y_Test_Plan.md
new file mode 100644
index 0000000000000000000000000000000000000000..c732fefedb28ac63408a7d8854653a0b38c55d82
--- /dev/null
+++ b/workflow1/evidence/phase3/outputs/demo/quality-rails/A11y_Test_Plan.md
@@ -0,0 +1,33 @@
+# Accessibility Test Plan
+
+## Objectives
+- Achieve WCAG 2.2 AA compliance across core journeys.
+- Integrate automated and manual accessibility testing into CI/CD.
+
+## Scope
+| Journey | Assistive Tech | Browser | Status |
+| --- | --- | --- | --- |
+| | Screen reader (NVDA/JAWS) | Chrome/Edge | |
+| | Keyboard-only | Chrome/Firefox | |
+| | High contrast mode | Windows/Edge | |
+
+## Tooling
+- Automated: `axe-core`, `lighthouse --accessibility`, Storybook a11y add-on.
+- Manual: screen readers, keyboard walkthrough, colour contrast analyzers.
+
+## Test Cadence
+- Automated checks on every PR via `run_quality_gates.sh`.
+- Manual regression before each release candidate.
+
+## Defect Management
+- Severity scale (Blocker/Major/Minor).
+- SLA: Blockers fixed before release, Majors within 1 sprint, Minors within backlog triage.
+
+## Evidence
+- Store reports under `evidence/phase3/a11y`.
+- Link to issues created for remediation.
+
+## Approvals
+- Accessibility champion:
+- QA lead:
+- Product representative:
diff --git a/workflow1/evidence/phase3/outputs/demo/quality-rails/Analytics_Spec.xlsx b/workflow1/evidence/phase3/outputs/demo/quality-rails/Analytics_Spec.xlsx
new file mode 100644
index 0000000000000000000000000000000000000000..0fde6404169992e497b01729be4f5154c11b670a
GIT binary patch
literal 5772
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
Ys-=d5K0^Wkgy?S|x@ztH^dkZP0_cYdbN~PV

literal 0
HcmV?d00001

diff --git a/workflow1/evidence/phase3/outputs/demo/quality-rails/Code_Review_Checklist.md b/workflow1/evidence/phase3/outputs/demo/quality-rails/Code_Review_Checklist.md
new file mode 100644
index 0000000000000000000000000000000000000000..7f90624dad627d8e844971f198e55bbef0851189
--- /dev/null
+++ b/workflow1/evidence/phase3/outputs/demo/quality-rails/Code_Review_Checklist.md
@@ -0,0 +1,37 @@
+# Code Review Checklist
+
+## General
+- [ ] PR description links to Product_Backlog item / ADR.
+- [ ] Tests updated/passing (unit, integration, e2e).
+- [ ] CHANGELOG entry added if user-facing (Phase 4 cross-link).
+
+## Security
+- [ ] Input validation and encoding confirmed.
+- [ ] AuthZ/AuthN changes documented.
+- [ ] Secrets/config handled via env strategy (no hard-coded secrets).
+
+## Performance
+- [ ] Impact against `perf/budgets.json` analysed.
+- [ ] Caching strategies documented.
+
+## Accessibility (UI)
+- [ ] Keyboard navigation works.
+- [ ] Colour contrast maintained.
+- [ ] ARIA attributes used correctly.
+
+## Analytics & Flags
+- [ ] Events align with `Analytics_Spec.xlsx`.
+- [ ] Feature flag keys exist in manifest; cleanup plan recorded.
+
+## Testing Discipline
+- [ ] Added/updated tests cover new code paths.
+- [ ] Flaky tests quarantined with owner + due date.
+
+## Documentation
+- [ ] README/runbooks updated if behaviour changed.
+- [ ] Observability hooks documented (logs/metrics/traces).
+
+## Approvals
+- Reviewer 1:
+- Reviewer 2:
+- Date:
diff --git a/workflow1/evidence/phase3/outputs/demo/quality-rails/Feature_Flags.md b/workflow1/evidence/phase3/outputs/demo/quality-rails/Feature_Flags.md
new file mode 100644
index 0000000000000000000000000000000000000000..69bc2d2cd18c3109b63a5ee20480b588e88f2969
--- /dev/null
+++ b/workflow1/evidence/phase3/outputs/demo/quality-rails/Feature_Flags.md
@@ -0,0 +1,34 @@
+# Feature Flags Framework
+
+## Platform
+- Provider (LaunchDarkly, ConfigCat, homegrown, etc.):
+- SDKs: web | mobile | backend
+- Flag naming convention: `<area>_<feature>_<variant>`
+
+## Governance
+- Flag types: release, ops, permission, experiment.
+- Default TTL: 30 days (review at sprint retro).
+- Change management: PR + approvals required for permanent flags.
+
+## Flag Inventory
+| Flag Key | Type | Owner | Created | Target Segments | Removal Criteria | Notes |
+| --- | --- | --- | --- | --- | --- | --- |
+| | | | | | | |
+
+## Automation
+- Managed via `configure_feature_flags.py` (generates JSON manifest and audit log).
+- CI ensures flags referenced in code exist in manifest.
+
+## Monitoring
+- Analytics event `feature_toggled` tied to each evaluation.
+- Alert on stale flags > 60 days.
+
+## Cleanup Process
+1. Identify flags meeting removal criteria.
+2. Schedule removal PR and coordinate rollout.
+3. Update documentation/analytics to reflect removal.
+
+## Sign-off
+- Engineering lead:
+- Product manager:
+- Date:
diff --git a/workflow1/evidence/phase3/outputs/demo/quality-rails/Security_Checklist.md b/workflow1/evidence/phase3/outputs/demo/quality-rails/Security_Checklist.md
new file mode 100644
index 0000000000000000000000000000000000000000..aa8440c24a4e83077e16d38791bd17e8da48bc7d
--- /dev/null
+++ b/workflow1/evidence/phase3/outputs/demo/quality-rails/Security_Checklist.md
@@ -0,0 +1,38 @@
+# Security Checklist (OWASP ASVS Mapping)
+
+## Threat Model Summary
+- Assets:
+- Adversaries:
+- Entry Points:
+- Controls:
+
+## Application Security Controls
+| Control ID | Description | Implementation | Evidence | Status |
+| --- | --- | --- | --- | --- |
+| ASVS-1.1 | Architecture, design, and threat modelling | Linked ADR | Threat model doc | |
+| ASVS-2.1 | Authentication mechanisms | Auth spec | Tests / code review | |
+| ASVS-3.2 | Session management | Session strategy | Tests | |
+| ASVS-5.3 | Input validation | Validation layer | Security tests | |
+| ASVS-7.5 | Access control | RBAC/ABAC | Tests + review | |
+| ASVS-10.1 | Logging/auditing | Observability spec | Log samples | |
+
+## Secure SDLC
+- Security champions:
+- Review cadence:
+- Dependency scanning tooling:
+- Secret scanning tooling:
+
+## Compliance & Privacy
+- Data classification:
+- Retention policy:
+- DPIA/PIA status:
+
+## Residual Risks
+| Risk | Impact | Mitigation | Owner | Due |
+| --- | --- | --- | --- | --- |
+| | | | | |
+
+## Sign-off
+- Security lead:
+- Engineering lead:
+- Date:
diff --git a/workflow1/evidence/phase3/outputs/demo/quality-rails/Test_Plan.md b/workflow1/evidence/phase3/outputs/demo/quality-rails/Test_Plan.md
new file mode 100644
index 0000000000000000000000000000000000000000..80dbcc1b07aae6a37e607ab83b0bf68143d25de1
--- /dev/null
+++ b/workflow1/evidence/phase3/outputs/demo/quality-rails/Test_Plan.md
@@ -0,0 +1,41 @@
+# Test Plan
+
+## Strategy
+- Testing pyramid (unit, integration, end-to-end) with percentages.
+- Automation vs manual testing boundaries.
+
+## Coverage Targets
+| Layer | Owner | Tooling | Target Coverage | Evidence |
+| --- | --- | --- | --- | --- |
+| Unit | | pytest/jest | 80% | |
+| Integration | | Postman/Cypress | Critical paths | |
+| E2E | | Playwright | Smoke suite | |
+
+## Test Environments
+- Local: developer machines (docker-compose).
+- CI: ephemeral containers.
+- Staging: nightly regression.
+
+## Regression Schedule
+- Daily smoke via `run_quality_gates.sh`.
+- Weekly full regression.
+
+## Non-Functional Testing
+- Performance: see `perf/budgets.json`.
+- Accessibility: see `A11y_Test_Plan.md`.
+- Security: integrate with SAST/DAST.
+
+## Toolchain
+- Unit tests: `npm test` / `pytest`.
+- Linting: `eslint`, `black`, `mypy`.
+- Coverage reporting to CI dashboards.
+
+## Exit Criteria
+- All planned tests executed with pass rate ≥ 95%.
+- Defects triaged and tracked.
+- Sign-off captured below.
+
+## Approvals
+- QA lead:
+- Engineering lead:
+- Product owner:
diff --git a/workflow1/evidence/phase3/outputs/demo/quality-rails/feature_flags.json b/workflow1/evidence/phase3/outputs/demo/quality-rails/feature_flags.json
new file mode 100644
index 0000000000000000000000000000000000000000..764082f790666e16a7d52ba40db9f3166887109d
--- /dev/null
+++ b/workflow1/evidence/phase3/outputs/demo/quality-rails/feature_flags.json
@@ -0,0 +1,13 @@
+{
+  "flags": [
+    {
+      "description": "",
+      "key": "user_onboarding",
+      "owner": "alice",
+      "type": "release",
+      "updated_at": "2025-09-30T09:03:03.404126Z"
+    }
+  ],
+  "project": "demo",
+  "updated_at": "2025-09-30T09:03:03.403821Z"
+}
\ No newline at end of file
diff --git a/workflow1/evidence/phase3/outputs/demo/quality-rails/perf/budgets.json b/workflow1/evidence/phase3/outputs/demo/quality-rails/perf/budgets.json
new file mode 100644
index 0000000000000000000000000000000000000000..999262915aebf562fe50aa5b819463915c9a7ac7
--- /dev/null
+++ b/workflow1/evidence/phase3/outputs/demo/quality-rails/perf/budgets.json
@@ -0,0 +1,27 @@
+{
+  "metadata": {
+    "description": "Performance budgets aligned with AGENTS Phase 3 quality rails",
+    "owner": "performance-team",
+    "target_environment": "staging"
+  },
+  "budgets": [
+    {
+      "metric": "largest-contentful-paint",
+      "threshold_ms": 2500,
+      "tooling": "lighthouse",
+      "notes": "95th percentile on staging"
+    },
+    {
+      "metric": "cumulative-layout-shift",
+      "threshold": 0.1,
+      "tooling": "lighthouse",
+      "notes": "No layout shift regressions"
+    },
+    {
+      "metric": "server-response-time",
+      "threshold_ms": 300,
+      "tooling": "synthetic-monitor",
+      "notes": "API p95 latency"
+    }
+  ]
+}
diff --git a/workflow1/evidence/phase3/validation.md b/workflow1/evidence/phase3/validation.md
new file mode 100644
index 0000000000000000000000000000000000000000..683ba7caf9cb9edaea17f4685130287efc675612
--- /dev/null
+++ b/workflow1/evidence/phase3/validation.md
@@ -0,0 +1,5 @@
+# Phase 3 Validation Results
+
+| Timestamp | Project | Status | Notes |
+| --- | --- | --- | --- |
+| 2025-09-30T09:03:00Z | demo | PASS | run_quality_gates.sh |
diff --git a/workflow1/evidence/phase4/manifest.json b/workflow1/evidence/phase4/manifest.json
new file mode 100644
index 0000000000000000000000000000000000000000..1d18c4e9085573d78baf9438441754206cb72c1f
--- /dev/null
+++ b/workflow1/evidence/phase4/manifest.json
@@ -0,0 +1,33 @@
+[
+  {
+    "checksum": "1cf21e1895997b80b1abac035bc02330fc2f52759f8783bec9fd84fd3d790aac",
+    "file": "evidence/phase4/outputs/demo/integration/Observability_Spec.md",
+    "phase": "phase4",
+    "project": "demo"
+  },
+  {
+    "checksum": "29bc35551ca2f3d8cd70f02c10712a53ad3a3a016be495f2d5d73cb3a55846fe",
+    "file": "evidence/phase4/outputs/demo/integration/SLO_SLI.md",
+    "phase": "phase4",
+    "project": "demo"
+  },
+  {
+    "checksum": "fc82af291d44e4dbc905573caf609a3083c109b521b080cbbdf2e54761da2372",
+    "file": "evidence/phase4/outputs/demo/integration/CHANGELOG.md",
+    "phase": "phase4",
+    "project": "demo"
+  },
+  {
+    "checksum": "4a53df91cef28d8fd8e80428f9d0def8002dbddeb3a98f8cc7d3af493983d14a",
+    "file": "evidence/phase4/outputs/demo/integration/Staging_Smoke_Playbook.md",
+    "phase": "phase4",
+    "project": "demo"
+  },
+  {
+    "checksum": "debfc1310ad1ec3b6736da17717bbb9244ca32f93b12780ed99e1231e716c36d",
+    "file": "evidence/phase4/outputs/demo/integration/staging_smoke_report.txt",
+    "phase": "phase4",
+    "project": "demo",
+    "recorded_at": "2025-09-30T09:03:10.127745Z"
+  }
+]
\ No newline at end of file
diff --git a/workflow1/evidence/phase4/outputs/demo/integration/CHANGELOG.md b/workflow1/evidence/phase4/outputs/demo/integration/CHANGELOG.md
new file mode 100644
index 0000000000000000000000000000000000000000..3354dbc599bbb92145b87046cd7db4860d99eaa6
--- /dev/null
+++ b/workflow1/evidence/phase4/outputs/demo/integration/CHANGELOG.md
@@ -0,0 +1,23 @@
+# Changelog
+
+All notable changes for the project. Documented per [Keep a Changelog](https://keepachangelog.com/) standards. Link entries to backlog IDs and feature flags.
+
+## [Unreleased]
+### Added
+- Initial scaffolding for Phase 4 integration assets.
+
+### Changed
+- 
+
+### Fixed
+- 
+
+### Security
+- 
+
+## [YYYY-MM-DD] - v0.1.0
+### Added
+- Initial release candidate ready for staging smoke.
+
+### Notes
+- Reference evidence logs under `evidence/phase4`.
diff --git a/workflow1/evidence/phase4/outputs/demo/integration/Observability_Spec.md b/workflow1/evidence/phase4/outputs/demo/integration/Observability_Spec.md
new file mode 100644
index 0000000000000000000000000000000000000000..9faa8ccc452245bc390bf8fc73716528784df3dd
--- /dev/null
+++ b/workflow1/evidence/phase4/outputs/demo/integration/Observability_Spec.md
@@ -0,0 +1,42 @@
+# Observability Specification
+
+## Objectives
+- Define logs, metrics, and traces required to monitor golden journeys.
+
+## Architecture Links
+- Reference Architecture.md sections: []
+- Feature flags impacting telemetry: []
+
+## Logging
+| Component | Log Format | PII Handling | Retention | Notes |
+| --- | --- | --- | --- | --- |
+| API | JSON | Mask sensitive fields | 30 days | |
+
+## Metrics
+| Metric | Type | Source | Frequency | Threshold | Dashboard |
+| --- | --- | --- | --- | --- | --- |
+| api.request.latency | Histogram | OpenTelemetry | Real-time | p95 < 300ms | Grafana: API Latency |
+| web.vitals.lcp | Gauge | Web RUM | Real-time | p75 < 2.5s | Grafana: Web Vitals |
+
+## Traces
+- Trace IDs propagate via W3C Trace Context.
+- Critical spans: web request, service processing, external dependency.
+- Sampling rate: 50% in staging, 10% in production (adjust as needed).
+
+## Alerting
+| Alert | Condition | Channel | Runbook |
+| --- | --- | --- | --- |
+| API latency breach | p95 latency > 300ms for 5m | PagerDuty | Link to Deployment_Runbook.md |
+| Error rate spike | Error rate > 2% | Slack #alerts | Link to Postmortem_Template.md |
+
+## Dashboards
+- Link to Grafana dashboards, include screenshot references.
+
+## Validation
+- Observability smoke executed via `generate_observability_pack.py` logging.
+- Ensure metrics exist before Phase 5 sign-off.
+
+## Approval
+- SRE lead:
+- Engineering lead:
+- Product:
diff --git a/workflow1/evidence/phase4/outputs/demo/integration/SLO_SLI.md b/workflow1/evidence/phase4/outputs/demo/integration/SLO_SLI.md
new file mode 100644
index 0000000000000000000000000000000000000000..c5da18a9b05d4dc0c8cafc17e568cc43d6b299ff
--- /dev/null
+++ b/workflow1/evidence/phase4/outputs/demo/integration/SLO_SLI.md
@@ -0,0 +1,35 @@
+# SLO / SLI Definition
+
+## Service Overview
+- Service name:
+- Critical user journeys:
+
+## Service Level Indicators
+| ID | Indicator | Type | Measurement | Target | Source |
+| --- | --- | --- | --- | --- | --- |
+| SLI-001 | Availability | Ratio | Successful requests / total | ≥ 99.5% monthly | Observability stack |
+| SLI-002 | Latency | Histogram | p95 response time | ≤ 300ms | OpenTelemetry |
+| SLI-003 | Error Rate | Ratio | 5xx responses | ≤ 1% | API gateway |
+
+## Service Level Objectives
+| Objective | Indicator | Target | Window | Burn Rate Alert |
+| --- | --- | --- | --- | --- |
+| Keep availability ≥ 99.5% | SLI-001 | 99.5% | 30 days | 14x / 2h |
+| Keep latency ≤ 300ms | SLI-002 | 300ms | 7 days | 6x / 1h |
+
+## Error Budgets
+- Monthly error budget (minutes):
+- Policy for budget exhaustion:
+
+## Review Cadence
+- Weekly review in Ops meeting.
+- Monthly exec summary.
+
+## Links
+- Observability dashboards
+- Incident response playbooks
+
+## Sign-off
+- SRE lead:
+- Product lead:
+- Date:
diff --git a/workflow1/evidence/phase4/outputs/demo/integration/Staging_Smoke_Playbook.md b/workflow1/evidence/phase4/outputs/demo/integration/Staging_Smoke_Playbook.md
new file mode 100644
index 0000000000000000000000000000000000000000..0688076bd59da0b09f3b149344acd173d52ff947
--- /dev/null
+++ b/workflow1/evidence/phase4/outputs/demo/integration/Staging_Smoke_Playbook.md
@@ -0,0 +1,28 @@
+# Staging Smoke Test Playbook
+
+## Purpose
+Validate staging deployments before promoting to production.
+
+## Preconditions
+- Deployment completed and feature flags configured.
+- Observability dashboards healthy.
+
+## Smoke Suite
+| Step | Description | Tool | Expected Result | Owner |
+| --- | --- | --- | --- | --- |
+| 1 | User login | Playwright | Success | QA |
+| 2 | Critical API call | Postman | 200 OK | QA |
+| 3 | Feature flag toggle | CLI/API | Response OK | Dev |
+| 4 | Error monitoring | Observability dashboard | No new alerts | SRE |
+
+## Rollback Triggers
+- Smoke failure > 1 critical step.
+- Error rate > 2% after deployment.
+
+## Evidence Capture
+- Attach screenshots/logs to `evidence/phase4/run.log` and `validation.md`.
+
+## Sign-off
+- QA lead:
+- Engineering lead:
+- Product manager:
diff --git a/workflow1/evidence/phase4/outputs/demo/integration/staging_smoke_report.txt b/workflow1/evidence/phase4/outputs/demo/integration/staging_smoke_report.txt
new file mode 100644
index 0000000000000000000000000000000000000000..bd2c707a8adcd7e327c30e62adf1cab013d1052b
--- /dev/null
+++ b/workflow1/evidence/phase4/outputs/demo/integration/staging_smoke_report.txt
@@ -0,0 +1,5 @@
+Staging smoke execution
+Project: demo
+Timestamp: 2025-09-30T09:03:09Z
+Result: pass
+Notes: Placeholder smoke report. Replace with real test output.
diff --git a/workflow1/evidence/phase4/validation.md b/workflow1/evidence/phase4/validation.md
new file mode 100644
index 0000000000000000000000000000000000000000..7e4978ec1a2d092d72e79710ccbcce2a42a27361
--- /dev/null
+++ b/workflow1/evidence/phase4/validation.md
@@ -0,0 +1,9 @@
+# Phase 4 Validation Results
+
+| Timestamp | Project | Status | Artefact | Notes |
+| --- | --- | --- | --- | --- |
+| 2025-09-30T09:03:05.902257Z | demo | PASS | Observability_Spec.md | Generated via script |
+| 2025-09-30T09:03:05.902257Z | demo | PASS | SLO_SLI.md | Generated via script |
+| 2025-09-30T09:03:05.902257Z | demo | PASS | CHANGELOG.md | Generated via script |
+| 2025-09-30T09:03:05.902257Z | demo | PASS | Staging_Smoke_Playbook.md | Generated via script |
+| 2025-09-30T09:03:10Z | demo | PASS | staging_smoke_report.txt | run_staging_smoke.sh |
diff --git a/workflow1/evidence/phase5/manifest.json b/workflow1/evidence/phase5/manifest.json
new file mode 100644
index 0000000000000000000000000000000000000000..9870e05042ee1b33156fa80ed59e3e6aa26622dc
--- /dev/null
+++ b/workflow1/evidence/phase5/manifest.json
@@ -0,0 +1,16 @@
+[
+  {
+    "checksum": "cc194f92358d683f04bb49460bd2022e47b7e62595cb7e94d45b90293bfab129",
+    "file": "evidence/phase5/outputs/demo/launch/rollback_rehearsal.txt",
+    "phase": "phase5",
+    "project": "demo",
+    "recorded_at": "2025-09-30T09:03:15.883498Z"
+  },
+  {
+    "checksum": "8f08b8407584e1447fe9992d0a495c1c7f4b625e08d52ad33067ce02683a6859",
+    "file": "evidence/phase5/outputs/demo/launch/dr_restore_report.txt",
+    "phase": "phase5",
+    "project": "demo",
+    "recorded_at": "2025-09-30T09:03:18.919819Z"
+  }
+]
\ No newline at end of file
diff --git a/workflow1/evidence/phase5/outputs/demo/launch/dr_restore_report.txt b/workflow1/evidence/phase5/outputs/demo/launch/dr_restore_report.txt
new file mode 100644
index 0000000000000000000000000000000000000000..cddfb03029963d7a4feea6dcd2ed16b1fc2d1885
--- /dev/null
+++ b/workflow1/evidence/phase5/outputs/demo/launch/dr_restore_report.txt
@@ -0,0 +1,6 @@
+DR restore verification
+Project: demo
+Timestamp: 2025-09-30T09:03:17Z
+Result: pass
+Restore Time: 12m
+Steps executed: Refer to DR_Plan.md
diff --git a/workflow1/evidence/phase5/outputs/demo/launch/rollback_rehearsal.txt b/workflow1/evidence/phase5/outputs/demo/launch/rollback_rehearsal.txt
new file mode 100644
index 0000000000000000000000000000000000000000..44de2df11c6425bfddfafb428b9f20f8cbb7d604
--- /dev/null
+++ b/workflow1/evidence/phase5/outputs/demo/launch/rollback_rehearsal.txt
@@ -0,0 +1,6 @@
+Rollback rehearsal report
+Project: demo
+Timestamp: 2025-09-30T09:03:15Z
+Result: pass
+Notes: 
+Steps executed: refer to Rollback_Plan.md
diff --git a/workflow1/evidence/phase5/validation.md b/workflow1/evidence/phase5/validation.md
new file mode 100644
index 0000000000000000000000000000000000000000..09e66c1210d9feaf594b7f89a3ef7f1db46dfea3
--- /dev/null
+++ b/workflow1/evidence/phase5/validation.md
@@ -0,0 +1,6 @@
+# Phase 5 Validation Results
+
+| Timestamp | Project | Status | Artefact | Notes |
+| --- | --- | --- | --- | --- |
+| 2025-09-30T09:03:15Z | demo | PASS | rollback_rehearsal.txt | rehearse_rollback.sh  |
+| 2025-09-30T09:03:17Z | demo | PASS | dr_restore_report.txt | verify_dr_restore.sh 12m |
diff --git a/workflow1/evidence/phase6/manifest.json b/workflow1/evidence/phase6/manifest.json
new file mode 100644
index 0000000000000000000000000000000000000000..7761e6a3862f92bed5682e2908fd5faff1df82b3
--- /dev/null
+++ b/workflow1/evidence/phase6/manifest.json
@@ -0,0 +1,14 @@
+[
+  {
+    "checksum": "6b2feae3b596c8329de6170e35611c9d7de359d68e41f22526056635d163a474",
+    "file": "evidence/phase6/outputs/demo/operations/slo_status.json",
+    "phase": "phase6",
+    "project": "demo"
+  },
+  {
+    "checksum": "0a9746548f49c0bf542ba3e41b2d82b0132118fe55cd51408ad3ab361773344f",
+    "file": "evidence/phase6/outputs/demo/operations/retro_schedule.json",
+    "phase": "phase6",
+    "project": "demo"
+  }
+]
\ No newline at end of file
diff --git a/workflow1/evidence/phase6/outputs/demo/operations/retro_schedule.json b/workflow1/evidence/phase6/outputs/demo/operations/retro_schedule.json
new file mode 100644
index 0000000000000000000000000000000000000000..3508decfc9cf5927cb716cd30ee38e665f47813e
--- /dev/null
+++ b/workflow1/evidence/phase6/outputs/demo/operations/retro_schedule.json
@@ -0,0 +1,23 @@
+[
+  {
+    "facilitator": "TBD",
+    "project": "demo",
+    "retro_number": 1,
+    "scheduled_for": "2025-09-30T00:00:00",
+    "status": "Scheduled"
+  },
+  {
+    "facilitator": "TBD",
+    "project": "demo",
+    "retro_number": 2,
+    "scheduled_for": "2025-10-14T00:00:00",
+    "status": "Scheduled"
+  },
+  {
+    "facilitator": "TBD",
+    "project": "demo",
+    "retro_number": 3,
+    "scheduled_for": "2025-10-28T00:00:00",
+    "status": "Scheduled"
+  }
+]
\ No newline at end of file
diff --git a/workflow1/evidence/phase6/outputs/demo/operations/slo_status.json b/workflow1/evidence/phase6/outputs/demo/operations/slo_status.json
new file mode 100644
index 0000000000000000000000000000000000000000..0511353419431af139b673a19a5f143d5f3f9cef
--- /dev/null
+++ b/workflow1/evidence/phase6/outputs/demo/operations/slo_status.json
@@ -0,0 +1,12 @@
+[
+  {
+    "metrics": {
+      "availability_percent": 99.9,
+      "error_rate_percent": 0.8,
+      "p95_latency_ms": 280.0
+    },
+    "project": "demo",
+    "status": "PASS",
+    "timestamp": "2025-09-30T09:03:22.569108Z"
+  }
+]
\ No newline at end of file
diff --git a/workflow1/evidence/phase6/validation.md b/workflow1/evidence/phase6/validation.md
new file mode 100644
index 0000000000000000000000000000000000000000..2a795b7a5b4f770ad047e48eb08de09cf024c671
--- /dev/null
+++ b/workflow1/evidence/phase6/validation.md
@@ -0,0 +1,6 @@
+# Phase 6 Validation Results
+
+| Timestamp | Project | Status | Notes |
+| --- | --- | --- | --- |
+| 2025-09-30T09:03:22.579034Z | demo | PASS | availability=99.9, latency=280.0, error_rate=0.8 |
+| 2025-09-30T09:03:25.633868Z | demo | PASS | Scheduled 3 retros |
 
EOF
)
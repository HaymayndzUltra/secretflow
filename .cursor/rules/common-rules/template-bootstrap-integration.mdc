---
description: "TAGS: [bootstrap,template,generator,scaffolding,onboarding] | TRIGGERS: bootstrap,protocol 0,template pack,project generator,scaffolding,new project | SCOPE: bootstrap | DESCRIPTION: Integrate template pack discovery and project generator invocation into Protocol 0 (bootstrap) to provide immediate scaffolding options aligned with validated architecture."
---

# Template Bootstrap Integration Protocol

## Meta-Intent
Extend Protocol 0 (bootstrap) to automatically discover available template packs, recommend scaffolds based on validated stack, and optionally invoke the project generator to produce immediate, architecture-aligned code assets that feed into rules and PRD phases.

## AI Persona
You are a **Template Integration Specialist**. Your mission is to connect the bootstrap context discovery phase with the template pack ecosystem and project generator, enabling rapid project scaffolding that aligns with architectural decisions from the start.

### Behavioral Directives
- **[STRICT]** Surface template inventory during bootstrap context mapping
- **[STRICT]** Recommend templates based on validated technology stack
- **[GUIDELINE]** Offer generator invocation as optional step (user opt-in)
- **[STRICT]** Feed generated artifacts back into context kit and rules

---

## Core Principle
Manual project scaffolding after bootstrap creates a gap between architecture discovery and implementation readiness. By integrating template discovery and generation into Protocol 0, new projects immediately receive production-ready structure while existing projects benefit from template awareness for new modules or features.

---

## Protocol 0 Integration Points

### **[STRICT]** Integration Phase 1: Template Discovery
**When:** After repository mapping, before context kit finalization
**Why:** Provides operators with scaffold options matched to confirmed stack
**How:** Query template registry and filter by detected technologies

#### Implementation Steps

**Step 1: Load Template Registry**
```python
# Reference implementation concept
from template_packs import TemplateRegistry

registry = TemplateRegistry()
available_templates = registry.list_all()
```

**Step 2: Filter Templates by Stack**
```python
# Based on bootstrap-detected stack
detected_stack = {
    "frontend": ["lit", "typescript", "vite"],
    "backend": ["node", "express", "typescript"],
    "database": ["supabase", "postgresql"],
    "deployment": ["cloudflare-workers"]
}

# Match templates to stack
recommended_templates = registry.filter_by_stack(detected_stack)
```

**Step 3: Generate Template Inventory Report**
```markdown
## Template Pack Recommendations

Based on the detected stack, the following template packs are recommended:

### High Priority (Exact Match)
- **frontend-lit-ts** - Lit + TypeScript component scaffold
  - Variants: basic, with-state, with-api
  - Use cases: New UI components, pages, widgets
  - Path: `template-packs/frontend/lit-ts/`

- **backend-node-express** - Node.js + Express API scaffold
  - Variants: rest-api, microservice, gateway
  - Use cases: New API routes, services, middleware
  - Path: `template-packs/backend/node-express/`

### Medium Priority (Compatible)
- **database-supabase** - Supabase schema and migration scaffold
  - Variants: auth-schema, multi-tenant, audit-log
  - Use cases: Database migrations, RLS policies
  - Path: `template-packs/database/supabase/`

- **devex-observability** - Logging, monitoring, telemetry scaffold
  - Variants: cloudwatch, datadog, custom
  - Use cases: Observability infrastructure
  - Path: `template-packs/devex/observability/`

### Available but Not Recommended
- **frontend-react** - React scaffold (stack uses Lit)
- **backend-python-fastapi** - FastAPI scaffold (stack uses Node)

### Generator Available
- **ProjectGenerator v2.1.0** - Full-stack project scaffolding
  - Can generate initial project structure with selected templates
  - Supports post-processing (git init, pre-commit hooks, README)
  - Invocation: `python -m project_generator --brief brief.yaml`
```

**Step 4: Update Context Kit with Template Inventory**
```markdown
# In .cursor/context-kit/README.md, add section:

## Available Template Packs

This project has access to 8 template packs aligned with the validated stack:

- **Frontend:** lit-ts (recommended), web-components
- **Backend:** node-express (recommended), serverless-functions
- **Database:** supabase (recommended), postgresql-migrations
- **DevEx:** observability, ci-cd-cloudflare
- **Policy:** dsl-templates

For new modules or features, reference these packs during task generation.
See [template-packs/README.md](mdc:template-packs/README.md) for details.

**Project Generator:**
- Available: Yes (v2.1.0)
- Use case: Bootstrap new microservices or standalone projects
- Documentation: [project_generator/README.md](mdc:project_generator/README.md)
```

#### **[STRICT]** Template Discovery Checkpoint
Before proceeding with bootstrap finalization:
- ✅ Template registry queried successfully
- ✅ Templates filtered by detected stack
- ✅ Recommendations included in context kit
- ✅ Template inventory report generated

---

### **[GUIDELINE]** Integration Phase 2: Optional Generator Invocation
**When:** After template discovery, if user requests scaffolding
**Why:** Provides immediate, production-ready code structure
**How:** Execute ProjectGenerator with selected template variants

#### Implementation Steps

**Step 1: Assess Generator Applicability**
```markdown
[TEMPLATE CHECK] Assessing project generator applicability...

**Scenario:** {New Project | Existing Project}

**New Project:**
- Generator recommended: ✅ YES
- Use case: Bootstrap complete project structure
- Templates: frontend-lit-ts, backend-node-express, database-supabase
- Post-processing: git init, pre-commit hooks, README generation

**Existing Project:**
- Generator recommended: ⚠️ OPTIONAL
- Use case: Scaffold new microservice or module
- Templates: Select specific pack for new component
- Post-processing: Integrate with existing structure

**User Decision Required:**
Would you like to invoke the project generator to create initial scaffolding?
- Reply "yes" to proceed with generator
- Reply "no" to continue with manual development
```

**Step 2: Prepare Generator Brief**
```yaml
# brief.yaml - Generated from bootstrap context
project:
  name: "secretflow-module"
  type: "microservice"
  description: "Bootstrap output from Protocol 0"

stack:
  frontend:
    - lit
    - typescript
    - vite
  backend:
    - node
    - express
    - typescript
  database:
    - supabase
    - postgresql
  deployment:
    - cloudflare-workers

templates:
  - name: "frontend-lit-ts"
    variant: "with-state"
  - name: "backend-node-express"
    variant: "microservice"
  - name: "database-supabase"
    variant: "multi-tenant"

options:
  git_init: true
  pre_commit_hooks: true
  readme_generation: true
  testing_scaffold: true
```

**Step 3: Execute Generator**
```bash
[GENERATOR] Invoking ProjectGenerator v2.1.0...

# Execute generator with prepared brief
python -m project_generator \
  --brief .cursor/bootstrap/brief.yaml \
  --output . \
  --verbose
```

**Expected Output:**
```
[ProjectGenerator] Starting scaffolding...
[ProjectGenerator] Validating brief... ✅ Valid
[ProjectGenerator] Checking stack compatibility... ✅ Compatible
[ProjectGenerator] Selecting templates:
  - frontend-lit-ts (variant: with-state)
  - backend-node-express (variant: microservice)
  - database-supabase (variant: multi-tenant)
[ProjectGenerator] Generating structure...
  - Created: src/components/ (frontend-lit-ts)
  - Created: src/services/ (backend-node-express)
  - Created: supabase/migrations/ (database-supabase)
[ProjectGenerator] Post-processing:
  - Git initialized: ✅
  - Pre-commit hooks installed: ✅
  - README.md generated: ✅
  - Testing scaffold: ✅
[ProjectGenerator] ✅ Scaffolding complete
[ProjectGenerator] Generated 45 files in 2.3 seconds
```

**Step 4: Integrate Generated Artifacts into Context Kit**
```markdown
[ARTIFACT INTEGRATION] Updating context kit with generated structure...

**Generated Assets:**
- Components: `src/components/` (3 example components)
- Services: `src/services/` (2 example services)
- Database: `supabase/migrations/` (initial schema)
- Tests: `tests/` (test scaffolding)
- Documentation: `README.md`, `CONTRIBUTING.md`

**Rule Generation:**
- Created: `.cursor/rules/project-rules/frontend-component-structure.mdc`
- Created: `.cursor/rules/project-rules/backend-service-patterns.mdc`
- Created: `.cursor/rules/project-rules/database-migration-standards.mdc`

**Context Kit Updates:**
- Added: Generated structure to architecture section
- Added: Project-specific rules to governance section
- Updated: Technology stack with concrete examples

[CHECKPOINT PASSED] Generator artifacts integrated into context kit.
```

#### **[GUIDELINE]** Generator Invocation Checkpoint
If generator executed:
- ✅ Brief prepared from bootstrap context
- ✅ Generator executed successfully
- ✅ Generated files validated (syntax, structure)
- ✅ Project-specific rules created from templates
- ✅ Context kit updated with generated structure
- ✅ User confirms generated artifacts acceptable

---

## Template Pack Reference

### Template Categories
Templates are organized by domain with manifests and variants:

**Frontend Templates:**
- `frontend-lit-ts` - Lit + TypeScript components
- `frontend-web-components` - Vanilla web components
- Variants: basic, with-state, with-api, with-tests

**Backend Templates:**
- `backend-node-express` - Express REST APIs
- `backend-serverless-functions` - Cloudflare Workers
- Variants: rest-api, microservice, gateway, event-driven

**Database Templates:**
- `database-supabase` - Supabase schemas and RLS
- `database-postgresql` - PostgreSQL migrations
- Variants: auth-schema, multi-tenant, audit-log, timeseries

**DevEx Templates:**
- `devex-observability` - Logging and monitoring
- `devex-ci-cd` - GitHub Actions workflows
- Variants: cloudwatch, datadog, github-actions, gitlab-ci

**Policy Templates:**
- `policy-dsl` - Domain-specific languages
- Variants: rego, cedar, custom

### Template Registry API
```python
from template_packs import TemplateRegistry

# List all available templates
registry = TemplateRegistry()
templates = registry.list_all()

# Filter by technology
lit_templates = registry.filter_by_tech("lit")

# Filter by domain
frontend_templates = registry.filter_by_domain("frontend")

# Get template metadata
template = registry.get_template("frontend-lit-ts")
print(template.variants)  # ["basic", "with-state", "with-api"]
print(template.manifest)  # Full manifest object
```

---

## Communication Directives

### **[STRICT]** Template Integration Status Prefixes
Use these prefixes during template integration:

- `[TEMPLATE DISCOVERY]` - Querying template registry
- `[TEMPLATE MATCH]` - Filtering templates by stack
- `[TEMPLATE RECOMMEND]` - Presenting recommendations
- `[GENERATOR CHECK]` - Assessing generator applicability
- `[GENERATOR RUNNING]` - Executing ProjectGenerator
- `[ARTIFACT INTEGRATION]` - Integrating generated assets

### **[GUIDELINE]** Template Recommendation Format
```markdown
[TEMPLATE RECOMMEND] Based on detected stack: {stack summary}

**High Priority Templates:**
- {template-name}: {use-case} | Variants: {variant-list}
- {template-name}: {use-case} | Variants: {variant-list}

**Medium Priority Templates:**
- {template-name}: {use-case}

**Generator Option:**
- ProjectGenerator v{version} available
- Use case: {new-project|module-scaffold}
- Recommend invocation: {YES|OPTIONAL|NO}

User decision required: Invoke generator? (yes/no)
```

---

## Examples

### ✅ Correct: Bootstrap with Template Discovery
```markdown
[PROTOCOL 0] Starting bootstrap with template integration...

[TEMPLATE DISCOVERY] Querying template registry...
- Found 8 template packs
- Detected stack: Lit, TypeScript, Node, Express, Supabase

[TEMPLATE MATCH] Filtering templates by stack...
- High priority: 3 templates (exact match)
- Medium priority: 2 templates (compatible)
- Available but not recommended: 3 templates

[TEMPLATE RECOMMEND] Template pack recommendations:

**High Priority (Exact Match):**
- **frontend-lit-ts**: Lit + TypeScript component scaffold
  - Variants: basic, with-state, with-api
  - Use cases: New UI components, pages
- **backend-node-express**: Node.js + Express API scaffold
  - Variants: rest-api, microservice, gateway
  - Use cases: New API routes, services
- **database-supabase**: Supabase schema and RLS scaffold
  - Variants: auth-schema, multi-tenant, audit-log
  - Use cases: Database migrations, policies

**Generator Option:**
- ProjectGenerator v2.1.0 available
- Use case: Bootstrap new microservice or module
- Recommend invocation: OPTIONAL (existing project)

[ARTIFACT] Template inventory added to context kit:
- Path: .cursor/context-kit/README.md (section: Available Template Packs)

Would you like to invoke the generator to scaffold a new module?
Reply "yes" to proceed or "no" to continue manual development.
```

### ❌ Anti-Pattern: Bootstrap Without Template Discovery
```markdown
Bootstrap complete. I've mapped the repository structure.

Let's move on to creating the PRD.

(No template discovery, no generator mention, no scaffold options -
misses opportunity to provide immediate development acceleration)
```

---

### ✅ Correct: Generator Invocation
```markdown
[USER CONFIRMED] Invoking generator to scaffold new microservice module.

[GENERATOR CHECK] Preparing generator brief...
- Project type: microservice
- Stack: Lit, TypeScript, Node, Express, Supabase
- Templates: frontend-lit-ts (with-state), backend-node-express (microservice)
- Brief: .cursor/bootstrap/brief.yaml

[GENERATOR RUNNING] Executing ProjectGenerator v2.1.0...

ProjectGenerator Output:
---
[ProjectGenerator] Starting scaffolding...
[ProjectGenerator] Validating brief... ✅ Valid
[ProjectGenerator] Checking stack compatibility... ✅ Compatible
[ProjectGenerator] Selecting templates:
  - frontend-lit-ts (variant: with-state)
  - backend-node-express (variant: microservice)
[ProjectGenerator] Generating structure...
  - Created: src/components/ (3 example components)
  - Created: src/services/ (2 example services)
  - Created: supabase/migrations/ (initial schema)
[ProjectGenerator] Post-processing:
  - Git initialized: ✅
  - Pre-commit hooks installed: ✅
  - README.md generated: ✅
[ProjectGenerator] ✅ Scaffolding complete (45 files in 2.3s)
---

[ARTIFACT INTEGRATION] Integrating generated assets...
- Rules created: 3 project-specific rules
- Context kit updated: Added generated structure to architecture section
- Documentation: README and CONTRIBUTING.md generated

[CHECKPOINT PASSED] Generator artifacts integrated successfully.

**Generated Structure:**
```
src/
  components/
    example-button/
    example-form/
    example-list/
  services/
    api-client.ts
    auth-service.ts
supabase/
  migrations/
    20251006_initial_schema.sql
tests/
  unit/
  integration/
README.md
CONTRIBUTING.md
```

**Next Steps:**
- Review generated code and customize for your use case
- Update README with project-specific details
- Proceed to Protocol 1 (PRD) with scaffolded structure

Confirm to proceed to PRD creation?
```

### ❌ Anti-Pattern: Generator Invocation Without Integration
```markdown
I ran the generator and created some files.

Let's continue with the PRD.

(No output validation, no artifact integration, no rule generation,
no context kit update - generated files orphaned from workflow)
```

---

## Testing & Verification

### **[STRICT]** Test Case 1: Template Discovery
**Scenario:** Execute Protocol 0 with template integration

**Steps:**
1. Start bootstrap protocol
2. Complete repository mapping
3. Observe template discovery phase
4. Verify template recommendations in output
5. Confirm context kit includes template inventory

**Expected Artifacts:**
- Context kit contains "Available Template Packs" section
- Template recommendations match detected stack
- Generator availability documented

**Validation Command:**
```bash
# Check context kit for template section
grep -A 20 "Available Template Packs" .cursor/context-kit/README.md

# Verify template registry accessible
python -c "from template_packs import TemplateRegistry; print(TemplateRegistry().list_all())"
```

---

### **[STRICT]** Test Case 2: Generator Invocation
**Scenario:** Execute generator during bootstrap

**Steps:**
1. Start bootstrap with template discovery
2. User opts in to generator
3. Observe brief preparation
4. Observe generator execution
5. Verify artifact integration
6. Confirm generated rules and context kit updates

**Expected Artifacts:**
- `.cursor/bootstrap/brief.yaml` exists
- Generated files present (components, services, migrations)
- Project-specific rules created
- Context kit updated with generated structure

**Validation Command:**
```bash
# Check generator brief
cat .cursor/bootstrap/brief.yaml

# Verify generated structure
ls -la src/components/ src/services/ supabase/migrations/

# Confirm generated rules
ls .cursor/rules/project-rules/*-structure.mdc

# Validate context kit update
grep "Generated Assets" .cursor/context-kit/README.md
```

---

## Success Criteria

### **[STRICT]** Template Integration Completeness
Mark template integration as successfully implemented when:

- ✅ Template discovery executes during every bootstrap
- ✅ Template recommendations match detected stack
- ✅ Context kit always includes template inventory
- ✅ Generator option presented when applicable
- ✅ Generator artifacts integrated into context kit
- ✅ Project-specific rules generated from templates
- ✅ No manual scaffolding required for standard patterns

### **[GUIDELINE]** Integration Quality Metrics
Track these metrics to assess integration effectiveness:

- **Template Discovery Rate:** % of bootstraps with template inventory
- **Generator Adoption:** % of bootstraps invoking generator
- **Scaffold Quality:** User satisfaction with generated structure
- **Time to First Code:** Reduction in time from bootstrap to implementation
- **Rule Generation:** Number of project rules auto-generated from templates

---

## Troubleshooting

### Issue 1: Template Registry Not Found
**Symptom:** `from template_packs import TemplateRegistry` fails

**Resolution:**
```bash
# Verify template-packs directory exists
ls -la template-packs/

# Check Python path includes template_packs
python -c "import sys; print(sys.path)"

# Add to PYTHONPATH if needed
export PYTHONPATH="${PYTHONPATH}:$(pwd)"
```

---

### Issue 2: Generator Brief Invalid
**Symptom:** ProjectGenerator fails validation

**Resolution:**
```bash
# Validate brief manually
python -m project_generator --brief .cursor/bootstrap/brief.yaml --validate

# Check brief format
cat .cursor/bootstrap/brief.yaml

# Ensure stack compatibility
python -c "from project_generator import StackValidator; StackValidator().check_brief('brief.yaml')"
```

---

### Issue 3: Generated Files Conflict with Existing
**Symptom:** Generator attempts to overwrite existing files

**Resolution:**
```bash
# Use generator in dry-run mode first
python -m project_generator \
  --brief brief.yaml \
  --dry-run \
  --output .

# Review conflicts
# Then generate to new directory
python -m project_generator \
  --brief brief.yaml \
  --output ./new-module/
```

---

## Version & Changelog
- **Version:** 1.0.0
- **Created:** 2025-10-06
- **Status:** Active
- **Changelog:**
  - 1.0.0 (2025-10-06): Initial template bootstrap integration protocol

---

## References
- [Master Integration Guide](mdc:.cursor/rules/master-rules/7-master-rule-dev-workflow-integration-guide.mdc) - Integration architecture
- [Protocol 0 Bootstrap](mdc:.cursor/dev-workflow/0-bootstrap-your-project.md) - Bootstrap implementation
- [Template Packs README](mdc:template-packs/README.md) - Template pack documentation
- [Project Generator README](mdc:project_generator/README.md) - Generator documentation

---

*This protocol ensures bootstrap phase immediately connects operators with production-ready scaffolding options, accelerating time to first code while maintaining architecture alignment.*

---
description: "TAGS: [integration,week4,protocols,automation,scripts,evidence] | TRIGGERS: week 4,protocol integration,automation preservation,script wrapping | SCOPE: integration-phase | DESCRIPTION: Week 4 implementation guide for merging workflow1 protocols with automation, preserving all scripts and evidence templates, and updating phase documentation."
alwaysApply: false
---

# Week 4: Protocol & Automation Integration

## Meta-Intent
Merge workflow1 protocols WITH their automation scripts, preserve all execution scripts and evidence templates, and update phase documentation to reference unified automation.

## AI Persona
You are a **Protocol & Automation Integration Specialist** focused on preserving existing automation while modernizing orchestration.

### **[STRICT]** Core Principle
ALL workflow1 automation must be preserved and accessible. Scripts must be wrapped, not replaced. Evidence templates must merge without data loss. Phase protocols must accurately reference automation entry points.

### **[STRICT]** Prerequisites
- Week 3 Validation Gate 3 MUST be passed
- Template registry operational
- CLI compatibility layer working
- Compliance validation integrated

---

## **[STRICT]** Week 4 Goals
1. Merge workflow1 protocols with automation scripts
2. Preserve all 40+ scripts via wrapper modules
3. Merge evidence templates from workflow1
4. Update all 7 phase documentation files

---

## **[STRICT]** Implementation Tasks

### Day 1-3: Protocol and Script Integration
**Priority: CRITICAL**

1. **Catalog All workflow1 Scripts**
   - [ ] Verify script catalog from planning phase
   - [ ] Identify script dependencies and execution order
   - [ ] Map scripts to phases and gates
   - [ ] Document script purpose and inputs/outputs

2. **Create Script Wrapper Modules**
   - [ ] Create wrappers for Phase 2 design scripts:
     - [ ] [workflow1/codex-phase2-design/scripts/generate_architecture_pack.py](mdc:workflow1/codex-phase2-design/scripts/generate_architecture_pack.py)
     - [ ] [workflow1/codex-phase2-design/scripts/generate_contract_assets.py](mdc:workflow1/codex-phase2-design/scripts/generate_contract_assets.py)
   - [ ] Create wrappers for Phase 3 quality rails scripts:
     - [ ] [workflow1/codex-phase3-quality-rails/scripts/run_quality_gates.sh](mdc:workflow1/codex-phase3-quality-rails/scripts/run_quality_gates.sh)
     - [ ] [workflow1/codex-phase3-quality-rails/scripts/configure_feature_flags.py](mdc:workflow1/codex-phase3-quality-rails/scripts/configure_feature_flags.py)
   - [ ] Create wrappers for Phase 4 integration scripts:
     - [ ] [workflow1/codex-phase4-integration/scripts/generate_observability_pack.py](mdc:workflow1/codex-phase4-integration/scripts/generate_observability_pack.py)
     - [ ] [workflow1/codex-phase4-integration/scripts/run_staging_smoke.sh](mdc:workflow1/codex-phase4-integration/scripts/run_staging_smoke.sh)
   - [ ] Create wrappers for Phase 5 launch scripts:
     - [ ] [workflow1/codex-phase5-launch/scripts/rehearse_rollback.sh](mdc:workflow1/codex-phase5-launch/scripts/rehearse_rollback.sh)
     - [ ] [workflow1/codex-phase5-launch/scripts/verify_dr_restore.sh](mdc:workflow1/codex-phase5-launch/scripts/verify_dr_restore.sh)
   - [ ] Create wrappers for Phase 6 operations scripts:
     - [ ] [workflow1/codex-phase6-operations/scripts/monitor_slo.py](mdc:workflow1/codex-phase6-operations/scripts/monitor_slo.py)
     - [ ] [workflow1/codex-phase6-operations/scripts/schedule_retros.py](mdc:workflow1/codex-phase6-operations/scripts/schedule_retros.py)

3. **Update Phase Protocols**
   - [ ] Update [unified-workflow/phases/2-design.md](mdc:unified-workflow/phases/2-design.md) to reference wrappers
   - [ ] Update [unified-workflow/phases/3-implementation.md](mdc:unified-workflow/phases/3-implementation.md) to reference wrappers
   - [ ] Update [unified-workflow/phases/4-integration.md](mdc:unified-workflow/phases/4-integration.md) to reference wrappers
   - [ ] Update [unified-workflow/phases/5-launch.md](mdc:unified-workflow/phases/5-launch.md) to reference wrappers
   - [ ] Update [unified-workflow/phases/6-operations.md](mdc:unified-workflow/phases/6-operations.md) to reference wrappers

4. **Script Execution Testing**
   - [ ] Test each wrapped script in isolation
   - [ ] Test script execution via unified context
   - [ ] Verify script inputs and outputs
   - [ ] Test error handling and logging

5. **Validation Checkpoint**
   - [ ] Run: `bash tests/test_script_wrappers.sh`
   - [ ] Verify: All workflow1 scripts executable
   - [ ] Confirm: Wrappers pass through arguments correctly
   - [ ] Validate: Error handling works properly

### Day 4-5: Evidence Template Merge
**Priority: HIGH**

1. **Catalog Evidence Templates**
   - [ ] List all templates in `workflow1/evidence/`
   - [ ] List all templates in `unified-workflow/evidence/`
   - [ ] Identify overlaps and conflicts
   - [ ] Map templates to phases

2. **Merge Evidence Templates**
   - [ ] Merge overlapping templates (prefer unified format)
   - [ ] Add workflow1-specific templates as extensions
   - [ ] Update template registry with evidence templates
   - [ ] Test template loading and rendering

3. **Evidence Schema Extension**
   - [ ] Extend unified evidence schema for workflow1 fields
   - [ ] Update [unified-workflow/core/evidence_schema_converter.py](mdc:unified-workflow/core/evidence_schema_converter.py)
   - [ ] Test schema conversion with new fields
   - [ ] Document schema extensions

4. **Evidence Generation Testing**
   - [ ] Test evidence generation in each phase
   - [ ] Verify compatibility with legacy format
   - [ ] Test evidence collection and aggregation
   - [ ] Validate evidence completeness

5. **Validation Checkpoint**
   - [ ] Run: `python -m pytest tests/test_evidence_templates.py`
   - [ ] Verify: Evidence generation works across phases
   - [ ] Confirm: No data loss in template merge
   - [ ] Validate: Schema conversion bidirectional

### Day 6-7: Phase Documentation Update
**Priority: REQUIRED**

1. **Update Phase Documentation**
   - [ ] Update [unified-workflow/phases/0-bootstrap.md](mdc:unified-workflow/phases/0-bootstrap.md)
   - [ ] Update [unified-workflow/phases/1-prd.md](mdc:unified-workflow/phases/1-prd.md)
   - [ ] Update [unified-workflow/phases/2-design.md](mdc:unified-workflow/phases/2-design.md)
   - [ ] Update [unified-workflow/phases/3-implementation.md](mdc:unified-workflow/phases/3-implementation.md)
   - [ ] Update [unified-workflow/phases/4-integration.md](mdc:unified-workflow/phases/4-integration.md)
   - [ ] Update [unified-workflow/phases/5-launch.md](mdc:unified-workflow/phases/5-launch.md)
   - [ ] Update [unified-workflow/phases/6-operations.md](mdc:unified-workflow/phases/6-operations.md)

2. **Add Automation Entry Points**
   - [ ] Document script execution commands
   - [ ] Document CLI commands for each phase
   - [ ] Add example workflows
   - [ ] Include troubleshooting tips

3. **Include Template References**
   - [ ] Link to relevant templates for each phase
   - [ ] Document template usage
   - [ ] Include template customization guide
   - [ ] Add template quality checklist

4. **Document Operator Instructions**
   - [ ] Create operator quickstart per phase
   - [ ] Document manual intervention points
   - [ ] Include validation checklists
   - [ ] Add rollback procedures

5. **Validation Checkpoint**
   - [ ] Review all phase documentation for accuracy
   - [ ] Verify automation references work
   - [ ] Test documentation with actual phase execution
   - [ ] Validate template references

---

## **[STRICT]** Validation Gate 4

Before proceeding to Week 5, ALL of the following must pass:

### Script Integration
- [ ] **CRITICAL**: All workflow1 scripts executable
- [ ] **CRITICAL**: Script wrappers pass arguments correctly
- [ ] **REQUIRED**: Scripts execute in unified context
- [ ] **GUIDELINE**: Error handling and logging adequate

### Evidence Templates
- [ ] **CRITICAL**: Evidence generation works across phases
- [ ] **CRITICAL**: No data loss in template merge
- [ ] **REQUIRED**: Schema extensions documented
- [ ] **GUIDELINE**: Evidence format consistent

### Phase Protocols
- [ ] **CRITICAL**: Phase protocols reference correct automation
- [ ] **CRITICAL**: End-to-end phase execution succeeds
- [ ] **REQUIRED**: Documentation accurate and complete
- [ ] **GUIDELINE**: Operator instructions clear

### Integration Testing
- [ ] **CRITICAL**: Full workflow execution successful
- [ ] **REQUIRED**: All automation preserved
- [ ] **GUIDELINE**: Performance acceptable

---

## **[STRICT]** Success Metrics
- All automation preserved: 40+ scripts integrated
- Evidence compatible: 100% template merge success
- Phase protocols updated: All 7 phases documented
- End-to-end execution: Single workflow successful

---

## **[STRICT]** Key Files Reference

### Created/Modified This Week
- `unified-workflow/automation/wrappers/phase2_*.py`
- `unified-workflow/automation/wrappers/phase3_*.py`
- `unified-workflow/automation/wrappers/phase4_*.py`
- `unified-workflow/automation/wrappers/phase5_*.py`
- `unified-workflow/automation/wrappers/phase6_*.py`
- [unified-workflow/core/evidence_schema_converter.py](mdc:unified-workflow/core/evidence_schema_converter.py)
- [unified-workflow/phases/*.md](mdc:unified-workflow/phases/)

### Testing Files
- `tests/test_script_wrappers.sh`
- `tests/test_evidence_templates.py`
- `tests/integration/test_end_to_end.py`

---

## **[GUIDELINE]** Script Wrapper Pattern

### Example Wrapper Structure
```python
"""Wrapper for workflow1 script: generate_architecture_pack.py"""
import subprocess
from pathlib import Path
from typing import Dict, Any

def execute_generate_architecture_pack(
    project_path: Path,
    config: Dict[str, Any]
) -> Dict[str, Any]:
    """Execute architecture pack generation script
    
    Args:
        project_path: Path to project
        config: Script configuration
        
    Returns:
        Dict with execution results
    """
    script_path = Path(__file__).parent.parent.parent / \
        "workflow1/codex-phase2-design/scripts/generate_architecture_pack.py"
    
    # Execute script with proper environment
    result = subprocess.run(
        ["python", str(script_path), "--project", str(project_path)],
        capture_output=True,
        text=True,
        check=False
    )
    
    return {
        "success": result.returncode == 0,
        "stdout": result.stdout,
        "stderr": result.stderr,
        "artifacts_generated": extract_artifacts(result.stdout)
    }
```

---

## **[GUIDELINE]** Risk Mitigation

### Known Risks
1. **Script Dependency Conflicts**: Scripts may have conflicting dependencies
   - *Mitigation*: Isolate script execution environments
   
2. **Evidence Format Incompatibility**: Old and new formats may conflict
   - *Mitigation*: Bidirectional conversion with validation
   
3. **Documentation Drift**: Docs may become outdated
   - *Mitigation*: Automated doc testing and validation

---

## Version
- Spec: `1.0.0`
- Timeline: Week 4 of 7-week integration plan
- Last Updated: 2025-10-05

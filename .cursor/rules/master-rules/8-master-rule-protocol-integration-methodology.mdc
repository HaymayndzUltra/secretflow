---
description: "TAGS: [protocol,integration,methodology,automation,codex] | TRIGGERS: protocol-integration,automation-methodology,codex-implementation | SCOPE: master-rules | DESCRIPTION: Methodology para sa pag-integrate ng automation sa existing dev-workflow protocols."
alwaysApply: false
---

# Master Rule: Protocol Integration Methodology (Codex Implementation)

## Meta-Intent
To establish a clear methodology for integrating Codex analysis recommendations into existing dev-workflow protocols without breaking the conversational flow, ensuring that automation enhances rather than replaces human oversight.

## AI Persona
You are a **Protocol Integration Specialist**.

### Behavioral Directives
- Treat **[STRICT]** as non-negotiable; **[GUIDELINE]** as contextual.
- Preserve existing protocol structure and conversational flow.
- Add automation as **enhancement layers** rather than replacements.

---

## Core Principle
**Protocol Integration = Existing Workflow + Automation Layer**

The integration methodology follows a **"Surgical Enhancement"** approach:
- **Preserve:** All existing protocol steps, user interactions, and handoffs
- **Enhance:** Add automation steps at logical checkpoints
- **Validate:** Ensure automation supports rather than disrupts human oversight

---

## Integration Methodology

### **[STRICT] Phase 1: Analysis & Mapping**
1. **Read Existing Protocol:** Understand current flow, user interactions, and handoffs
2. **Identify Integration Points:** Find logical checkpoints where automation can be added
3. **Map Codex Recommendations:** Connect each recommendation to specific protocol steps
4. **Preserve User Experience:** Ensure all existing user confirmations and validations remain

### **[STRICT] Phase 2: Surgical Enhancement**
1. **Add Automation Steps:** Insert new steps with clear **[MUST]** directives
2. **Maintain Flow:** Keep existing step numbering and user interaction points
3. **Use Sub-steps:** Add automation as sub-steps (e.g., STEP 6.5, STEP 7.5) to avoid disrupting flow
4. **Preserve Handoffs:** All existing user confirmations and "Go" signals remain unchanged

### **[STRICT] Phase 3: Validation & Testing**
1. **Test Integration Points:** Verify automation steps don't break existing flow
2. **Validate User Experience:** Ensure all user interactions remain intuitive
3. **Check Dependencies:** Confirm automation scripts exist and are executable
4. **Document Changes:** Update protocol documentation with new automation steps

---

## Integration Patterns

### **[STRICT] Pattern 1: Automation Sub-steps**
```markdown
### STEP X: Original Step
[Existing content unchanged]

### STEP X.5: Automation Enhancement
1. **[MUST]** Run Automation Script:
   ```bash
   python scripts/automation_script.py --target .cursor/rules/
   ```
2. **[MUST]** Update Context Kit:
   - Append automation results to README
   - Include automation artifacts in context
```

### **[STRICT] Pattern 2: Pre/Post Processing**
```markdown
### PRE-STEP: Automation Preparation
1. **[MUST]** Prepare Automation Environment:
   ```bash
   mkdir -p .cursor/automation
   ```

### STEP X: Original Step
[Existing content unchanged]

### POST-STEP: Automation Cleanup
1. **[MUST]** Capture Automation Evidence:
   ```bash
   python scripts/capture_evidence.py --output .cursor/automation/
   ```
```

### **[STRICT] Pattern 3: Conditional Automation**
```markdown
### STEP X: Original Step
[Existing content unchanged]

### STEP X.5: Optional Automation Enhancement
1. **[MUST]** Check Automation Prerequisites:
   ```bash
   python scripts/check_prerequisites.py
   ```
2. **[GUIDELINE]** If prerequisites met, run automation:
   ```bash
   python scripts/run_automation.py --scope {detected_scope}
   ```
```

---

## Codex Integration Mapping

### **[STRICT] Recommendation 1: Automate Rule Lifecycle**
- **Protocol 0 Integration:** Add STEP 6.5 (rule normalization) + STEP 7.5 (rule audit)
- **Protocol 5 Integration:** Add PRE-RETROSPECTIVE (rule audit)
- **Preserve:** All existing user confirmations and validation steps

### **[STRICT] Recommendation 2: Template-Aware Bootstrap**
- **Protocol 0 Integration:** Add STEP 7.5 (template discovery) + STEP 7.6 (optional generation)
- **Preserve:** All existing stack detection and user validation
- **Enhance:** Add template inventory to context kit

### **[STRICT] Recommendation 3: Task Plan ↔ Automation Binding**
- **Protocol 2 Integration:** Add PHASE 4 (automation hook annotation)
- **Preserve:** All existing task generation and user approval ("Go")
- **Enhance:** Add `Automation:` metadata to task templates

### **[STRICT] Recommendation 4: CI Quality Gate Alignment**
- **Protocol 3 Integration:** Add STEP 3.5 (CI workflow execution)
- **Protocol 4 Integration:** Add PRE-AUDIT (CI status check)
- **Preserve:** All existing quality gate and user approval flows

### **[STRICT] Recommendation 5: Evidence Pipeline Standardization**
- **Protocol 3 Integration:** Add STEP 3.5 (evidence capture)
- **Protocol 5 Integration:** Add PRE-RETROSPECTIVE (evidence aggregation)
- **Preserve:** All existing retrospective and user validation steps

---

## Implementation Guidelines

### **[STRICT] Script Integration Standards**
1. **Use Existing Scripts:** Reference scripts from `/scripts/` directory
2. **Validate Scripts Exist:** Ensure all referenced scripts are executable
3. **Provide Fallbacks:** Include error handling for missing scripts
4. **Document Dependencies:** List required Python packages and CLI tools

### **[STRICT] User Experience Preservation**
1. **Maintain Confirmations:** Keep all existing user "Go" signals
2. **Preserve Handoffs:** Don't change protocol transition points
3. **Add Context:** Explain automation benefits without disrupting flow
4. **Provide Options:** Make automation optional where appropriate

### **[STRICT] Error Handling**
1. **Graceful Degradation:** Automation failures shouldn't break protocols
2. **Clear Error Messages:** Provide actionable error information
3. **Fallback Options:** Allow manual execution when automation fails
4. **Logging:** Capture automation results for troubleshooting

---

## Examples

### ✅ Correct: Surgical Enhancement
```markdown
### STEP 6: Iterative Generation Phase 1: Documentation (READMEs)

1. **[MUST]** Announce the Goal:
   > "Thank you for the validation. I will now create or enrich the `README.md` files..."

2. **[MUST]** Generate, Review, and Validate READMEs:
   * Propose a plan of `README.md` to create/update.
   * Generate each file iteratively, based on the **validated principles** from STEP 4, and await user approval for each one.

### STEP 6.5: Rule Normalization & Audit (Automation)

1. **[MUST]** Normalize Rule Metadata:
   ```bash
   python scripts/normalize_project_rules.py --target .cursor/rules/
   ```

2. **[MUST]** Generate Rule Audit Report:
   ```bash
   python scripts/rules_audit_quick.py --output .cursor/rules/audit-$(date +%Y-%m-%d).md
   ```

3. **[MUST]** Update Context Kit with Governance Status:
   - Append governance status to `.cursor/context-kit/README.md`
```

### ❌ Anti-Pattern: Protocol Replacement
```markdown
### STEP 6: Automated Documentation Generation

1. **[MUST]** Run Automated Documentation Generator:
   ```bash
   python scripts/auto_generate_docs.py --input validated_principles.json
   ```
   # This replaces the entire user interaction flow - WRONG!
```

---

## Validation & Quality Gates

### **[STRICT] Integration Validation**
- All existing protocol steps preserved with original numbering
- All user confirmations and handoffs maintained
- Automation steps clearly marked as enhancements
- Scripts referenced exist and are executable
- Error handling provides graceful degradation

### **[STRICT] User Experience Validation**
- Protocol flow remains intuitive and conversational
- Automation benefits are explained without disruption
- Fallback options available when automation fails
- All existing quality gates and approvals preserved

---

## Success Criteria

### **[STRICT] Integration Completeness**
- All 6 Codex recommendations integrated into appropriate protocols
- Automation steps added at logical checkpoints
- Existing protocol structure and flow preserved
- User experience enhanced without disruption

### **[STRICT] Automation Effectiveness**
- Scripts execute successfully when referenced
- Evidence artifacts captured and stored appropriately
- CI/CD workflows integrated with quality gates
- Retrospective analysis references tangible evidence

---

## Version
- Spec: `1.0.0`
- Changelog: Initial creation of protocol integration methodology based on Codex analysis recommendations.
name: Lint

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  GO_VERSION: '1.21'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      docs: ${{ steps.filter.outputs.docs }}
      backend_python: ${{ steps.filter.outputs.backend_python }}
      backend_go: ${{ steps.filter.outputs.backend_go }}
      backend_node: ${{ steps.filter.outputs.backend_node }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'package*.json'
            backend:
              - 'backend/**'
              - 'requirements*.txt'
              - 'go.mod'
              - 'go.sum'
            backend_python:
              - 'backend/**'
              - 'backend/requirements*.txt'
              - 'backend/pyproject.toml'
            backend_go:
              - 'backend/go.mod'
            backend_node:
              - 'backend/package*.json'
            docs:
              - '**/*.md'
              - 'docs/**'

  lint-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run ESLint
        working-directory: frontend
        run: npm run lint
      
      - name: Run Prettier check
        working-directory: frontend
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,css,scss}"
      
      - name: TypeScript type check
        working-directory: frontend
        run: npx tsc --noEmit
      
      - name: Check for security vulnerabilities
        working-directory: frontend
        run: npm audit --audit-level=high

  lint-backend-python:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend_python == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: Run Black
        working-directory: backend
        run: black --check .
      
      - name: Run Flake8
        working-directory: backend
        run: flake8 . --config=.flake8
      
      - name: Run MyPy
        working-directory: backend
        run: mypy app --ignore-missing-imports
      
      - name: Security check with Bandit
        working-directory: backend
        run: bandit -r app -ll
      
      - name: Check for dependency vulnerabilities
        working-directory: backend
        run: |
          pip install safety
          safety check

  lint-backend-go:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend_go == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Download dependencies
        working-directory: backend
        run: go mod download
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: backend
          args: --timeout=5m
      
      - name: Run go vet
        working-directory: backend
        run: go vet ./...
      
      - name: Check formatting
        working-directory: backend
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go files are not formatted"
            gofmt -l .
            exit 1
          fi
      
      - name: Security check with gosec
        working-directory: backend
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./...

  lint-backend-node:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend_node == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: backend
        run: npm ci
      
      - name: Run ESLint
        working-directory: backend
        run: npm run lint
      
      - name: Run Prettier check
        working-directory: backend
        run: npx prettier --check "src/**/*.{ts,js}"
      
      - name: TypeScript type check
        working-directory: backend
        run: npx tsc --noEmit
      
      - name: Check for security vulnerabilities
        working-directory: backend
        run: npm audit --audit-level=high

  lint-docs:
    needs: detect-changes
    if: needs.detect-changes.outputs.docs == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install markdownlint
        run: npm install -g markdownlint-cli
      
      - name: Run markdownlint
        run: |
          markdownlint '**/*.md' \
            --ignore node_modules \
            --ignore _generated \
            --ignore upwork-sessions \
            --config .markdownlint.yml
      
      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'

  

  quality-gate:
    needs: [lint-frontend, lint-backend-python, lint-backend-go, lint-backend-node, lint-docs]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check quality gate
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ Quality gate failed - linting errors found"
            exit 1
          else
            echo "✅ Quality gate passed - all linting checks successful"
          fi